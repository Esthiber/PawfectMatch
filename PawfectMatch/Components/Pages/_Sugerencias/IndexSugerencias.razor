@page "/Sugerencias"
@attribute [Authorize(Roles = "Admin")]
@inject SugerenciasService sugerenciasService
@rendermode InteractiveServer

<link rel="stylesheet" href="@Assets["Sugerencias.css"]" />

<div class="sugerencias-admin-container">
    <div class="header-section">
        <div class="title-container">
            <h1 class="page-title">Sugerencias de Usuarios</h1>
            <p class="page-subtitle">Revisa las ideas y comentarios de nuestra comunidad</p>
        </div>

        <div class="stats-container">
            <div class="stat-card">
                <span class="stat-number">@(sugerencias?.Count ?? 0)</span>
                <span class="stat-label">Total de sugerencias</span>
            </div>
        </div>
    </div>

    @if (sugerencias is null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando sugerencias...</p>
        </div>
    }
    else if (sugerencias.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-comment-slash"></i>
            </div>
            <h2>No hay sugerencias registradas</h2>
            <p>Cuando los usuarios envíen sugerencias, aparecerán aquí.</p>
        </div>
    }
    else
    {
        <div class="filter-section">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text"
                       placeholder="Buscar por correo o contenido..."
                       @bind-value="searchTerm"
                       @bind-value:event="oninput"
                       class="search-input" />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button @onclick="ClearSearch" class="clear-search">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
        </div>

        <div class="sugerencias-list">
            @foreach (var sug in filteredSugerencias)
            {
                <div class="sugerencia-card">
                    <div class="sugerencia-header">
                        <div class="user-info">
                            <div class="user-avatar">
                                @(sug.UserMail?.Substring(0, 1).ToUpper() ?? "?")
                            </div>
                            <div class="user-details">
                                <span class="user-email">@sug.UserMail</span>
                                <span class="sugerencia-id">ID: @sug.SugerenciaId</span>
                            </div>
                        </div>
                        <div class="sugerencia-actions">
                            <button class="action-button" @onclick="() => ToggleExpandSugerencia(sug.SugerenciaId)">
                                <i class="bi @(expandedSugerencias.Contains(sug.SugerenciaId) ? "bi-chevron-up" : "bi-chevron-down")"></i>
                            </button>
                        </div>
                    </div>

                    <div class="sugerencia-content @(expandedSugerencias.Contains(sug.SugerenciaId) ? "expanded" : "")">
                        <p>@sug.Descripcion</p>
                    </div>
                </div>
            }
        </div>

        @if (filteredSugerencias.Count == 0 && !string.IsNullOrEmpty(searchTerm))
        {
            <div class="no-results">
                <p>No se encontraron sugerencias que coincidan con "<strong>@searchTerm</strong>"</p>
                <button @onclick="ClearSearch" class="reset-search-button">
                    <i class="fas fa-undo"></i> Limpiar búsqueda
                </button>
            </div>
        }
    }
</div>

@code {
    private List<Sugerencias>? sugerencias;
    private HashSet<int> expandedSugerencias = new HashSet<int>();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        sugerencias = await sugerenciasService.ListAsync(x => true);
    }

    private List<Sugerencias> filteredSugerencias => sugerencias?
        .Where(s => string.IsNullOrEmpty(searchTerm) ||
                    (s.UserMail?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.Descripcion?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList() ?? new List<Sugerencias>();

    private void ToggleExpandSugerencia(int id)
    {
        if (expandedSugerencias.Contains(id))
            expandedSugerencias.Remove(id);
        else
            expandedSugerencias.Add(id);
    }

    private void ClearSearch()
    {
        searchTerm = "";
    }
}