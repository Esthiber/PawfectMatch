@page "/solicitudes/crear/{id:int}"

@inject SolicitudesAdopcionesService solicitudesAdopcionesService
@inject AdoptantesService adoptantesService
@inject MascotasService mascotasService
@inject AuthenticationStateProvider authProvider
@inject ServiciosService serviciosService
@inject SolicitudesServiciosService solicitudesServiciosService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@attribute [Authorize]
@rendermode InteractiveServer

<div class="adoption-request-container">
    <div class="adoption-request-header">
        <h1 class="adoption-title">Solicitud de Adopción</h1>
        <button class="btn-secondary" @onclick="Volver">
            <i class="fas fa-arrow-left"></i> Volver
        </button>
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-error">
            <i class="fas fa-exclamation-circle"></i>
            <span>@error</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i>
            <span>@mensajeExito</span>
        </div>
    }

    <div class="adoption-content">
        <!-- Información de la mascota -->
        <div class="pet-info-section">
            <h2 class="section-title">Mascota a Adoptar</h2>

            @if (mascota == null)
            {
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <p>Cargando información de la mascota...</p>
                </div>
            }
            else
            {
                <div class="pet-card">
                    <div class="pet-image">
                        <img src="@mascota.FotoUrl" alt="Foto de @mascota.Nombre" />
                    </div>
                    <div class="pet-details">
                        <h3 class="pet-name">@mascota.Nombre</h3>
                        <div class="pet-badges">
                            <span class="badge badge-categoria">@mascota.Categoria.Nombre</span>
                            <span class="badge badge-estado">@mascota.Estado.Nombre</span>
                        </div>
                        <div class="pet-info-grid">
                            <div class="info-item">
                                <span class="info-label">Tamaño</span>
                                <span class="info-value">@mascota.RelacionSize.Size</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Edad</span>
                                <span class="info-value">@CalculateAge(mascota.FechaNacimiento)</span>
                            </div>
                        </div>
                        <p class="pet-description">@mascota.Descripcion</p>
                    </div>
                </div>
            }
        </div>

        <!-- Información del adoptante -->
        <div class="adopter-info-section">
            <h2 class="section-title">Información del Adoptante</h2>

            @if (string.IsNullOrEmpty(adoptanteActual.Nombre) || string.IsNullOrEmpty(adoptanteActual.Ocupacion))
            {
                <div class="alert alert-warning">
                    <i class="fas fa-info-circle"></i>
                    <span>Para continuar con la solicitud, necesitamos algunos datos básicos sobre ti.</span>
                </div>
            }

            <EditForm Model="adoptanteActual" OnValidSubmit="GuardarAdoptante" class="adopter-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="nombre">Nombre completo:</label>
                    <InputText id="nombre" class="form-control" @bind-Value="adoptanteActual.Nombre" placeholder="Ingresa tu nombre completo" />
                    <ValidationMessage For="()=> adoptanteActual.Nombre" />
                </div>

                <div class="form-group">
                    <label for="ocupacion">Ocupación:</label>
                    <InputText id="ocupacion" class="form-control" @bind-Value="adoptanteActual.Ocupacion" placeholder="Ingresa tu ocupación actual" />
                    <ValidationMessage For="()=> adoptanteActual.Ocupacion" />
                </div>

                <div class="form-group">
                    <label for="email">Correo electrónico:</label>
                    <input type="email" id="email" class="form-control" value="@correoUsuario" disabled />
                    <small class="form-text">Este es el correo asociado a tu cuenta.</small>
                </div>

                <button type="submit" class="btn-save">
                    <i class="fas fa-save"></i> Guardar Información
                </button>
            </EditForm>
        </div>

        <!-- Servicios adicionales -->
        <div class="services-section">
            <h2 class="section-title">Servicios Adicionales</h2>

            @if (IsShowServices)
            {
                <div class="services-selector">
                    <PawfectMatch.Components.Pages._Servicios.AddServices Servicios="ListaServicios"
                                                                          OnServiciosSeleccionados="RecibirServicios"
                                                                          OnCancelar="CancelarSeleccion" />
                </div>
            }
            else
            {
                <div class="services-container">
                    <p class="services-intro">Selecciona servicios adicionales que te gustaría incluir con tu adopción:</p>

                    @if (serviciosSeleccionados.Count > 0)
                    {
                        <div class="selected-services">
                            @foreach (var servicio in serviciosSeleccionados)
                            {
                                <div class="service-item">
                                    <i class="fas fa-check-circle"></i>
                                    <span>@servicio.Nombre</span>
                                    <button class="btn-remove-service" @onclick="() => RemoveService(servicio)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-services">No has seleccionado ningún servicio adicional.</p>
                    }

                    <button class="btn-add-services" @onclick="ShowServices">
                        <i class="fas fa-plus-circle"></i> Añadir Servicios
                    </button>
                </div>
            }
        </div>

        <!-- Enviar solicitud -->
        <div class="submit-section">
            <h2 class="section-title">Enviar Solicitud</h2>

            <div class="submit-container">
                <p class="submit-intro">
                    Al enviar esta solicitud, confirmas que deseas adoptar a <strong>@mascota?.Nombre</strong>
                    y que toda la información proporcionada es correcta.
                </p>

                @if (string.IsNullOrEmpty(adoptanteActual.Nombre) || string.IsNullOrEmpty(adoptanteActual.Ocupacion))
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Debes completar tu información personal antes de enviar la solicitud.</span>
                    </div>
                }

                <button class="btn-submit" @onclick="GuardarSolicitud"
                        disabled="@(string.IsNullOrEmpty(adoptanteActual.Nombre) || string.IsNullOrEmpty(adoptanteActual.Ocupacion))">
                    <i class="fas fa-paper-plane"></i> Enviar Solicitud de Adopción
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private SolicitudesAdopciones solicitud { get; set; } = new();
    private Mascotas? mascota { get; set; }
    private string? mensajeExito { get; set; }
    private string? error { get; set; }
    private Adoptantes adoptanteActual { get; set; } = new();
    private string? correoUsuario { get; set; }

    private bool IsShowServices { get; set; } = false;
    private List<Servicios> ListaServicios = new();
    private List<Servicios> serviciosSeleccionados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Inicializar solicitud
            solicitud = new()
                {
                    Fecha = DateTime.Now,
                    EstadoSolicitudId = 1 // Estado inicial (pendiente)
                };

            var authState = await authProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            correoUsuario = authState.User.FindFirst(ClaimTypes.Email)?.Value;

            if (userId is not null)
            {
                var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                adoptanteActual = adoptantes.FirstOrDefault() ?? new Adoptantes { UsuarioId = userId };

                mascota = await mascotasService.SearchByIdAsync(id);

                if (mascota is null || mascota.MascotaId == 0)
                {
                    error = "No se encontró la mascota solicitada.";
                    return;
                }

                solicitud.MascotaId = id;

                if (adoptanteActual.AdoptanteId != 0)
                {
                    solicitud.AdoptanteId = adoptanteActual.AdoptanteId;
                }

                // Cargar servicios por defecto
                var defaultService = await serviciosService.SearchByIdAsync(1);
                if (defaultService != null && defaultService.ServicioId > 0)
                {
                    serviciosSeleccionados.Add(defaultService);
                }
            }
            else
            {
                error = "No se pudo identificar al usuario. Por favor, inicia sesión nuevamente.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar la información: {ex.Message}";
        }
    }

    private async Task GuardarSolicitud()
    {
        try
        {
            // Verificar que el usuario esté autenticado
            var authState = await authProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrWhiteSpace(userId))
            {
                error = "Usuario no autenticado. Por favor, inicia sesión nuevamente.";
                return;
            }

            // Verificar que la información del adoptante esté completa
            if (string.IsNullOrWhiteSpace(adoptanteActual.Nombre) || string.IsNullOrWhiteSpace(adoptanteActual.Ocupacion))
            {
                error = "Debes completar tu información personal antes de enviar la solicitud.";
                return;
            }

            // Asociar usuario si aún no lo tiene
            if (string.IsNullOrWhiteSpace(adoptanteActual.UsuarioId))
            {
                adoptanteActual.UsuarioId = userId;
            }

            // Si el adoptante no existe aún, lo creamos
            if (adoptanteActual.AdoptanteId == 0)
            {
                bool adoptanteGuardado = await adoptantesService.InsertAsync(adoptanteActual);
                if (!adoptanteGuardado)
                {
                    error = "Error al guardar la información del adoptante.";
                    return;
                }

                // Volver a buscar el adoptante para obtener el ID asignado
                var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                adoptanteActual = adoptantes.FirstOrDefault() ?? new();
            }

            // Verificación de mascota
            if (mascota is null || mascota.MascotaId == 0)
            {
                mascota = await mascotasService.SearchByIdAsync(id);

                if (mascota is null || mascota.MascotaId == 0)
                {
                    error = "No se encontró la mascota solicitada.";
                    return;
                }
            }

            // Asignar datos a la solicitud
            solicitud.MascotaId = mascota.MascotaId;
            solicitud.AdoptanteId = adoptanteActual.AdoptanteId;
            solicitud.Fecha = DateTime.Now;

            // Guardar la solicitud
            bool guardado = await solicitudesAdopcionesService.InsertAsync(solicitud);

            if (guardado)
            {
                // Guardar los servicios seleccionados
                foreach (var servicio in serviciosSeleccionados)
                {
                    var solicitudServicio = new SolicitudesServicios
                        {
                            SolicitudAdopcionId = solicitud.SolicitudAdopcionId,
                            ServicioId = servicio.ServicioId
                        };

                    await solicitudesServiciosService.InsertAsync(solicitudServicio);
                }

                mensajeExito = "¡Tu solicitud de adopción ha sido enviada con éxito! Pronto nos pondremos en contacto contigo.";
                ToastService.ShowSuccess(mensajeExito);

                // Reiniciar el formulario
                solicitud = new() { Fecha = DateTime.Now, EstadoSolicitudId = 1 };
                serviciosSeleccionados.Clear();

                // Redirigir después de un breve retraso
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/mis-solicitudes");
            }
            else
            {
                error = "Error al enviar la solicitud. Por favor, intenta nuevamente.";
                ToastService.ShowError(error);
            }
        }
        catch (Exception ex)
        {
            error = $"Error al procesar la solicitud: {ex.Message}";
            ToastService.ShowError(error);
        }
    }

    private async Task GuardarAdoptante()
    {
        try
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrWhiteSpace(userId))
            {
                error = "Usuario no autenticado. Por favor, inicia sesión nuevamente.";
                return;
            }

            adoptanteActual.UsuarioId = userId;

            bool guardado = adoptanteActual.AdoptanteId == 0
                ? await adoptantesService.InsertAsync(adoptanteActual)
                : await adoptantesService.UpdateAsync(adoptanteActual);

            if (guardado)
            {
                mensajeExito = "¡Información guardada correctamente!";
                ToastService.ShowSuccess(mensajeExito);

                // Si es un nuevo adoptante, actualizar el ID
                if (adoptanteActual.AdoptanteId == 0)
                {
                    var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                    adoptanteActual = adoptantes.FirstOrDefault() ?? adoptanteActual;
                }
            }
            else
            {
                error = "No se pudo guardar la información. Por favor, intenta nuevamente.";
                ToastService.ShowError(error);
            }
        }
        catch (Exception ex)
        {
            error = $"Error al guardar la información: {ex.Message}";
            ToastService.ShowError(error);
        }
    }

    private void RecibirServicios(List<Servicios> seleccionados)
    {
        serviciosSeleccionados = seleccionados;
        HideServices();
    }

    private void CancelarSeleccion()
    {
        HideServices();
    }

    private async Task ShowServices()
    {
        ListaServicios = await serviciosService.ListAsync(l => true);
        IsShowServices = true;
    }

    private void HideServices() => IsShowServices = false;

    private void RemoveService(Servicios servicio)
    {
        serviciosSeleccionados.Remove(servicio);
    }

    private void Volver()
    {
        NavigationManager.NavigateTo($"{Urls.Mascotas.Detalle}{id}");
    }

    private string CalculateAge(DateOnly birthDate)
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        var age = today.Year - birthDate.Year;

        // Ajustar la edad si aún no ha pasado el cumpleaños este año
        if (birthDate.Month > today.Month || (birthDate.Month == today.Month && birthDate.Day > today.Day))
        {
            age--;
        }

        if (age < 1)
        {
            // Calcular meses
            var months = (today.Month - birthDate.Month) + 12 * (today.Year - birthDate.Year);
            if (today.Day < birthDate.Day)
            {
                months--;
            }

            if (months < 1)
            {
                // Calcular días
                var days = (today.DayNumber - birthDate.DayNumber);
                return $"{days} {(days == 1 ? "día" : "días")}";
            }

            return $"{months} {(months == 1 ? "mes" : "meses")}";
        }

        return $"{age} {(age == 1 ? "año" : "años")}";
    }
}