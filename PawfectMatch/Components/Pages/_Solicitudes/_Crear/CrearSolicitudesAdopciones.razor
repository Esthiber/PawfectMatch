@page "/Crear/SolicitudesAdopciones/{id:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using PawfectMatch.Models._Solicitudes
@using PawfectMatch.Models._Mascotas
@attribute [Authorize]

@inject SolicitudesAdopcionesService solicitudesAdopcionesService
@inject AdoptantesService adoptantesService
@inject MascotasService mascotasService
@inject AuthenticationStateProvider authProvider

@rendermode InteractiveServer

<h3>Crear Solicitud de Adopción</h3>

@if (mensajeExito is not null)
{
    <div class="alert alert-success">@mensajeExito</div>
}

@if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}

<EditForm Model="@solicitud" OnValidSubmit="GuardarSolicitud">

    <div class="mb-3">
        <label>Mascota:</label>
        <div class="card p-3">
            <img src="@mascota?.FotoUrl" alt="Foto de la mascota" width="200" class="mb-2" />
            <p><strong>Nombre:</strong> @mascota?.Nombre</p>
            <p><strong>Categoría:</strong> @mascota?.Categoria.Nombre</p>
            <p><strong>Tamaño:</strong> @mascota?.RelacionSize.Size</p>
            <p><strong>Estado:</strong> @mascota?.Estado.Nombre</p>
            <p><strong>Descripción:</strong> @mascota?.Descripcion</p>
        </div>
    </div>



    <button class="btn btn-primary" type="submit">Enviar solicitud</button>
</EditForm>

<div class="mb-3">
    <label>Información del Adoptante:</label>
    <EditForm Model="adoptanteActual" OnValidSubmit="GuardarAdoptante">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label for="nombre">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="adoptanteActual.Nombre" />
        </div>

        <div class="mb-2">
            <label for="ocupacion">Ocupación:</label>
            <InputText id="ocupacion" class="form-control" @bind-Value="adoptanteActual.Ocupacion" />
        </div>

        <button type="submit" class="btn btn-secondary">Guardar Adoptante</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int id { get; set; }
    public SolicitudesAdopciones solicitud { get; set; } = null!;
    public Mascotas mascota { get; set; } = null!;
    public string? mensajeExito { get; set; }
    public string? error { get; set; }
    public Adoptantes adoptanteActual { get; set; } = new();
    public string? correoUsuario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        solicitud = new();
        solicitud.Fecha = DateTime.Now;
        solicitud.EstadoSolicitudId = 1; // Asumiendo que 1 = "Pendiente"

        var authState = await authProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId is not null)
        {
            var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
            var adoptante = adoptantes.FirstOrDefault() ?? new();

            adoptanteActual = adoptante;
            correoUsuario = authState.User.FindFirst(ClaimTypes.Email)?.Value;

            if (adoptante is not null)
            {
                solicitud.AdoptanteId = adoptante.AdoptanteId;
                mascota = await mascotasService.SearchByIdAsync(id);
                solicitud.MascotaId = id;
            }
            else
            {
                error = "No se encontró el adoptante vinculado al usuario.";
            }
        }
    }

    private async Task GuardarSolicitud()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrWhiteSpace(userId))
        {
            error = "Usuario no autenticado.";
            return;
        }

        // Asociar usuario si aún no lo tiene
        if (string.IsNullOrWhiteSpace(adoptanteActual.UsuarioId))
        {
            adoptanteActual.UsuarioId = userId;
        }

        // Si el adoptante no existe aún, lo creamos
        if (adoptanteActual.AdoptanteId == 0)
        {
            bool adoptanteGuardado = await adoptantesService.InsertAsync(adoptanteActual);
            if (!adoptanteGuardado)
            {
                error = "Error al guardar el adoptante.";
                return;
            }

            // Volver a buscar el adoptante para obtener el ID asignado
            var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
            adoptanteActual = adoptantes.FirstOrDefault() ?? new();
        }

        // Verificación de mascota
        if (mascota is null)
        {
            mascota = await mascotasService.SearchByIdAsync(id);
        }

        if (mascota is null)
        {
            error = "Debe seleccionar una mascota válida.";
            return;
        }

        // Asignar datos a la solicitud
        solicitud.MascotaId = mascota.MascotaId;
        solicitud.AdoptanteId = adoptanteActual.AdoptanteId;

        bool guardado = await solicitudesAdopcionesService.InsertAsync(solicitud);
        if (guardado)
        {
            mensajeExito = "¡Solicitud enviada con éxito!";
            solicitud = new() { Fecha = DateTime.Now, EstadoSolicitudId = 1 };
        }
        else
        {
            error = "Error al enviar la solicitud.";
        }
    }

    private async Task GuardarAdoptante()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrWhiteSpace(userId))
        {
            error = "Usuario no autenticado.";
            return;
        }

        adoptanteActual.UsuarioId = userId;

        bool guardado = adoptanteActual.AdoptanteId == 0
            ? await adoptantesService.InsertAsync(adoptanteActual)
            : await adoptantesService.UpdateAsync(adoptanteActual);

        if (guardado)
        {
            mensajeExito = "Información del adoptante guardada.";
        }
        else
        {
            error = "No se pudo guardar la información del adoptante.";
        }
    }

}
