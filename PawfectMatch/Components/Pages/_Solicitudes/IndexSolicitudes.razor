@page "/solicitudes"
@attribute [Authorize]
@inject SolicitudesAdopcionesService solicitudesAdopcionesService
@inject AdoptantesService adoptantesService
@inject MascotasService mascotasService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer

<PageTitle>Solicitudes de Adopción | Pawfect Match</PageTitle>

<div class="solicitudes-page">
    <div class="header-section">
        <div class="title-area">
            <h3>Solicitudes de Adopción</h3>
            <p class="subtitle">
                @if (esAdmin)
                {
                    <span>Gestiona todas las solicitudes de adopción de mascotas</span>
                }
                else
                {
                    <span>Tus solicitudes de adopción de mascotas</span>
                }
            </p>
        </div>
        <div class="stats-area">
            <div class="stat-card">
                <div class="stat-value">@(solicitudes?.Count(s => s.EstadoSolicitudId == 1) ?? 0)</div>
                <div class="stat-label">Pendientes</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@(solicitudes?.Count(s => s.EstadoSolicitudId == 2) ?? 0)</div>
                <div class="stat-label">Aprobadas</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@(solicitudes?.Count(s => s.EstadoSolicitudId == 3) ?? 0)</div>
                <div class="stat-label">Rechazadas</div>
            </div>
        </div>
    </div>

    <div class="filter-section">
        <div class="search-input-group">
            <i class="bi bi-search"></i>
            <input type="text"
                   class="form-control"
                   placeholder="Buscar por nombre de mascota o adoptante..."
                   @bind="searchTerm"
                   @bind:event="oninput"
                   @onkeyup="ApplyFilters" />
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn-clear" @onclick="ClearSearch">
                    <i class="bi bi-x-circle"></i>
                </button>
            }
        </div>

        <div class="filter-options">
            <div class="filter-dropdown">
                <select class="form-select" @bind="estadoFiltro">
                    <option value="0">Todos los estados</option>
                    <option value="1">Pendientes</option>
                    <option value="2">Aprobadas</option>
                    <option value="3">Rechazadas</option>
                </select>
            </div>

            <div class="date-filter">
                <input type="date" class="form-control" placeholder="Fecha desde" @bind="fechaDesde" />
            </div>

            @if (IsFiltered)
            {
                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearFilters">
                    <i class="bi bi-x-circle"></i> Limpiar filtros
                </button>
            }
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando solicitudes...</span>
            </div>
            <p>Cargando solicitudes...</p>
        </div>
    }
    else if (!solicitudesFiltradas.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-clipboard-x"></i>
            </div>
            <h4>No hay solicitudes disponibles</h4>
            @if (IsFiltered)
            {
                <p>No se encontraron solicitudes con los filtros seleccionados.</p>
                <button class="btn btn-primary" @onclick="ClearFilters">
                    <i class="bi bi-arrow-repeat"></i> Limpiar filtros
                </button>
            }
            else
            {
                @if (esAdmin)
                {
                    <p>Cuando los usuarios envíen solicitudes de adopción, aparecerán aquí.</p>
                }
                else
                {
                    <p>Aún no has enviado ninguna solicitud de adopción.</p>
                }
                <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/Mascotas"))">
                    <i class="bi bi-arrow-left"></i> Volver a Mascotas
                </button>
            }
        </div>
    }
    else
    {
        <div class="solicitudes-grid">
            @foreach (var solicitud in solicitudesFiltradas)
            {
                <div class="solicitud-card @GetEstadoClass(solicitud.EstadoSolicitudId)">
                    <div class="card-header">
                        <div class="estado-badge @GetEstadoClass(solicitud.EstadoSolicitudId)">
                            @solicitud.EstadoSolicitud.Nombre
                        </div>
                        <div class="fecha">
                            <i class="bi bi-calendar3"></i> @solicitud.Fecha.ToString("dd/MM/yyyy")
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="mascota-info">
                            <img src="@solicitud.Mascota.FotoUrl" alt="@solicitud.Mascota.Nombre" />
                            <div>
                                <h5>@solicitud.Mascota.Nombre</h5>
                                <p>@solicitud.Mascota.Categoria.Nombre</p>
                            </div>
                        </div>

                        <div class="adoptante-info">
                            <div class="avatar">
                                @solicitud.Adoptante.Nombre[0]
                            </div>
                            <div>
                                <h5>@solicitud.Adoptante.Nombre</h5>
                                <p>@(string.IsNullOrEmpty(solicitud.Adoptante.Ocupacion) ? "Sin ocupación" : solicitud.Adoptante.Ocupacion)</p>
                            </div>
                        </div>
                    </div>

                    <div class="card-footer">
                        <a class="btn btn-primary" href="/Details/Solicitudes/@solicitud.SolicitudAdopcionId">
                            <i class="bi bi-eye"></i> Ver Detalles
                        </a>

                        @if (esAdmin && solicitud.EstadoSolicitudId == 1)
                        {
                            <div class="action-buttons">
                                <button class="btn btn-success" @onclick="() => AprobarSolicitud(solicitud.SolicitudAdopcionId)">
                                    <i class="bi bi-check-circle"></i> Aprobar
                                </button>
                                <button class="btn btn-danger" @onclick="() => RechazarSolicitud(solicitud.SolicitudAdopcionId)">
                                    <i class="bi bi-x-circle"></i> Rechazar
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<SolicitudesAdopciones>? solicitudes;
    private List<SolicitudesAdopciones> solicitudesFiltradas = new();
    private bool isLoading = true;
    private bool esAdmin = false;
    private string? userId;

    // Filtros
    private string searchTerm = string.Empty;
    private int estadoFiltro = 0;
    private DateTime? fechaDesde = null;

    private bool IsFiltered =>
        !string.IsNullOrEmpty(searchTerm) ||
        estadoFiltro != 0 ||
        fechaDesde != null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Determinar si el usuario es administrador
            var authState = await authProvider.GetAuthenticationStateAsync();
            esAdmin = authState.User.IsInRole("Admin");
            userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Cargar las solicitudes según el rol
            if (esAdmin)
            {
                // Administrador: cargar todas las solicitudes
                solicitudes = await solicitudesAdopcionesService.ListAsync(s => true);
            }
            else if (!string.IsNullOrEmpty(userId))
            {
                // Usuario normal: cargar solo sus solicitudes
                var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                var adoptanteId = adoptantes.FirstOrDefault()?.AdoptanteId ?? 0;

                if (adoptanteId > 0)
                {
                    solicitudes = await solicitudesAdopcionesService.ListAsync(s => s.AdoptanteId == adoptanteId);
                }
                else
                {
                    // El usuario no tiene un perfil de adoptante
                    solicitudes = new List<SolicitudesAdopciones>();
                }
            }
            else
            {
                solicitudes = new List<SolicitudesAdopciones>();
            }

            // Aplicar ordenamiento inicial
            if (solicitudes != null)
            {
                solicitudesFiltradas = solicitudes
                    .OrderByDescending(s => s.EstadoSolicitudId == 1)
                    .ThenByDescending(s => s.Fecha)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar solicitudes: {ex.Message}");
            solicitudes = new List<SolicitudesAdopciones>();
            solicitudesFiltradas = new List<SolicitudesAdopciones>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        if (solicitudes == null) return;

        solicitudesFiltradas = solicitudes.ToList();

        // Filtrar por término de búsqueda
        if (!string.IsNullOrEmpty(searchTerm))
        {
            solicitudesFiltradas = solicitudesFiltradas
                .Where(s =>
                    s.Adoptante.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    s.Mascota.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Filtrar por estado
        if (estadoFiltro != 0)
        {
            solicitudesFiltradas = solicitudesFiltradas
                .Where(s => s.EstadoSolicitudId == estadoFiltro)
                .ToList();
        }

        // Filtrar por fecha
        if (fechaDesde != null)
        {
            solicitudesFiltradas = solicitudesFiltradas
                .Where(s => s.Fecha.Date >= fechaDesde.Value.Date)
                .ToList();
        }

        // Ordenar: pendientes primero, luego por fecha descendente
        solicitudesFiltradas = solicitudesFiltradas
            .OrderByDescending(s => s.EstadoSolicitudId == 1)
            .ThenByDescending(s => s.Fecha)
            .ToList();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        estadoFiltro = 0;
        fechaDesde = null;

        if (solicitudes != null)
        {
            solicitudesFiltradas = solicitudes
                .OrderByDescending(s => s.EstadoSolicitudId == 1)
                .ThenByDescending(s => s.Fecha)
                .ToList();
        }
    }

    private string GetEstadoClass(int estadoId)
    {
        return estadoId switch
        {
            1 => "pendiente",
            2 => "aprobada",
            3 => "rechazada",
            _ => ""
        };
    }

    private async Task AprobarSolicitud(int id)
    {
        if (!esAdmin) return; // Solo administradores pueden aprobar
        var soli = await solicitudesAdopcionesService.SearchByIdAsync(id);

        soli.Mascota.EstadoId = 2;
        bool exitoMascota = await mascotasService.UpdateAsync(soli.Mascota);

        bool result = await solicitudesAdopcionesService.AceptarSolicitud(id);
        if (result && exitoMascota)
        {
            // Actualizar la lista de solicitudes
            if (esAdmin)
            {
                solicitudes = await solicitudesAdopcionesService.ListAsync(s => true);
            }
            else if (!string.IsNullOrEmpty(userId))
            {
                var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                var adoptanteId = adoptantes.FirstOrDefault()?.AdoptanteId ?? 0;

                if (adoptanteId > 0)
                {
                    solicitudes = await solicitudesAdopcionesService.ListAsync(s => s.AdoptanteId == adoptanteId);
                }
            }

            ApplyFilters();
        }
    }

    private async Task RechazarSolicitud(int id)
    {
        if (!esAdmin) return; // Solo administradores pueden rechazar

        bool result = await solicitudesAdopcionesService.RechazarSolicitud(id);
        if (result)
        {
            // Actualizar la lista de solicitudes
            if (esAdmin)
            {
                solicitudes = await solicitudesAdopcionesService.ListAsync(s => true);
            }
            else if (!string.IsNullOrEmpty(userId))
            {
                var adoptantes = await adoptantesService.ListAsync(a => a.UsuarioId == userId);
                var adoptanteId = adoptantes.FirstOrDefault()?.AdoptanteId ?? 0;

                if (adoptanteId > 0)
                {
                    solicitudes = await solicitudesAdopcionesService.ListAsync(s => s.AdoptanteId == adoptanteId);
                }
            }

            ApplyFilters();
        }
    }
}