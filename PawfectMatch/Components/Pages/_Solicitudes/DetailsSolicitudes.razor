@page "/Details/Solicitudes/{id:int}"

@inject SolicitudesAdopcionesService solicitudesService
@inject HistorialAdopcionesService historialService
@inject MascotasService mascotasService
@inject CitasService citasService
@inject NavigationManager navManager
@inject SolicitudesServiciosService solicitudesServiciosService

@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

<h3>Detalle de Solicitud</h3>

@if (solicitud is null)
{
    <p><em>Cargando detalles...</em></p>
}
else
{
    <div class="card p-3">
        <h5>Información del Adoptante</h5>
        <p><strong>Nombre:</strong> @solicitud.Adoptante.Nombre</p>
        <p><strong>Ocupación:</strong> @solicitud.Adoptante.Ocupacion</p>

        <h5>Información de la Mascota</h5>
        <p><strong>Nombre:</strong> @solicitud.Mascota.Nombre</p>
        <p><strong>Descripción:</strong> @solicitud.Mascota.Descripcion</p>
        <p><strong>Fecha de nacimiento:</strong> @solicitud.Mascota.FechaNacimiento</p>
        <img src="@solicitud.Mascota.FotoUrl" alt="Mascota" style="max-width:200px;" />

        <h5>Estado de la Solicitud</h5>
        <p><strong>Estado:</strong> @solicitud.EstadoSolicitud?.Nombre</p>
        <p><strong>Fecha:</strong> @solicitud.Fecha.ToString("dd/MM/yyyy")</p>

        <ul>
            @foreach (var s in listaServicios)
            {
                <li>@s.Servicio?.Nombre | @s.Servicio?.Costo</li>
            }
            @listaServicios.Sum(ss => ss.Servicio?.Costo);
        </ul>

        @if (solicitud.EstadoSolicitudId == 2 && listaCitas.Count == 0)
        {
            @if (solicitud.Mascota is not null)
            {
                <div class="mb-3">
                    <CrearCitas Mascota="solicitud.Mascota" Adoptante="solicitud.Adoptante" />
                </div>
            }
        }

        <div class="mt-3">
            @if (solicitud.EstadoSolicitudId == 1)
            {
                <button class="btn btn-success me-2" @onclick="AceptarSolicitud">Aceptar</button>
                <button class="btn btn-danger me-2" @onclick="RechazarSolicitud">Rechazar</button>
            }
            <button class="btn btn-secondary" @onclick="Volver">Volver</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private SolicitudesAdopciones? solicitud { get; set; }

    private List<Citas> listaCitas { get; set; } = new();

    private List<SolicitudesServicios> listaServicios { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        solicitud = await solicitudesService.SearchByIdAsync(id);
        listaCitas = await citasService.ListAsync(c => c.MascotaId == solicitud.MascotaId && c.AdoptanteId == solicitud.AdoptanteId);
        listaServicios = await solicitudesServiciosService.ListAsync(ss => ss.SolicitudAdopcionId == solicitud.SolicitudAdopcionId);
    }

    private async Task AceptarSolicitud()
    {
        if (solicitud is null) return;

        bool exito = await solicitudesService.AceptarSolicitud(solicitud.SolicitudAdopcionId);

        bool exitoMascota = await mascotasService.AdoptarAsync(solicitud.MascotaId);

        HistorialAdopciones historialAdopciones = new();
        historialAdopciones.AdoptanteId = solicitud.AdoptanteId;
        historialAdopciones.MascotaId = solicitud.MascotaId;
        historialAdopciones.FechaAdopcion = DateTime.Now;
        historialAdopciones.Notas = "Adopción aprobada desde el sistema";
        bool exitoHistorial = await historialService.InsertAsync(historialAdopciones);

        if (exito && exitoMascota && exitoHistorial)
        {
            navManager.NavigateTo($"{Urls.Solicitudes.Index}", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Error al aceptar la solicitud.");
        }
    }

    private async Task RechazarSolicitud()
    {
        bool exito = await solicitudesService.RechazarSolicitud(solicitud.SolicitudAdopcionId);
        if (exito)
        {
            navManager.NavigateTo("/Index/Solicitudes", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Error al rechazar la solicitud.");
        }
    }

    private void Volver()
    {
        navManager.NavigateTo("/Index/Solicitudes");
    }
}
