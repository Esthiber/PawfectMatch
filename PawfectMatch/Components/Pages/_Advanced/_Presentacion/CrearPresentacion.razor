@page "/Advanced/Presentaciones/Crear"
@page "/Advanced/Presentaciones/Editar/{id:int}"
@inject PresentacionesService presentacionesService
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<link rel="stylesheet" href="@Assets["Presentaciones.css"]" />

<div class="crear-presentacion-container">
    <div class="crear-presentacion-header">
        <h1 class="crear-presentacion-title">
            @(isEditing ? "Editar Presentación" : "Crear Nueva Presentación")
        </h1>
        <div class="header-actions">
            <button class="btn-secondary" @onclick="Volver">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
            <button class="btn-primary" @onclick="GuardarPresentacion">
                <i class="fas fa-save"></i> Guardar Presentación
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando presentación...</p>
        </div>
    }
    else
    {
        <div class="crear-presentacion-content">
            <div class="presentacion-form">
                <div class="form-group">
                    <label for="titulo">Título de la Presentación</label>
                    <input type="text" id="titulo" class="form-control" @bind="presentacion.Titulo" placeholder="Ingrese un título descriptivo" />
                    @if (string.IsNullOrEmpty(presentacion.Titulo))
                    {
                        <div class="validation-message">El título es requerido</div>
                    }
                </div>

                <div class="form-group">
                    <label for="descripcion">Descripción (opcional)</label>
                    <textarea id="descripcion" class="form-control" @bind="presentacion.Descripcion" placeholder="Describa el propósito de esta presentación" rows="3"></textarea>
                </div>

                <div class="form-group">
                    <div class="checkbox-wrapper">
                        <input type="checkbox" id="esActiva" @bind="presentacion.EsActiva" />
                        <label for="esActiva">Activar esta presentación al guardar</label>
                    </div>
                    <div class="form-text">Si activa esta presentación, se desactivará cualquier otra presentación activa.</div>
                </div>
            </div>

            <div class="diapositivas-section">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="fas fa-images"></i> Diapositivas
                    </h2>
                    <button class="btn-add-slide" @onclick="AgregarDiapositiva">
                        <i class="fas fa-plus"></i> Agregar Diapositiva
                    </button>
                </div>

                @if (!diapositivas.Any())
                {
                    <div class="empty-slides">
                        <div class="empty-icon">
                            <i class="bi bi-image-fill"></i>
                        </div>
                        <h3>No hay diapositivas</h3>
                        <p>Agregue diapositivas para crear su presentación.</p>
                        <button class="btn-primary" @onclick="AgregarDiapositiva">
                            <i class="bi bi-plus"></i> Agregar Primera Diapositiva
                        </button>
                    </div>
                }
                else
                {
                    <div class="slides-container">
                        <div class="slides-list" id="slides-sortable">
                            @foreach (var diapositiva in diapositivas.OrderBy(d => d.Orden))
                            {
                                <div class="slide-item @(diapositivaSeleccionada?.DiapositivaId == diapositiva.DiapositivaId ? "selected" : "")"
                                     @onclick="() => SeleccionarDiapositiva(diapositiva)"
                                     data-id="@diapositiva.DiapositivaId">
                                    <div class="slide-drag-handle">
                                        <i class="bi bi-list-nested"></i>
                                    </div>
                                    <div class="slide-number">@diapositiva.Orden</div>
                                    <div class="slide-preview" style="background-image: url('@diapositiva.ImageUrl')">
                                        @if (!string.IsNullOrEmpty(diapositiva.Titulo_Left) || !string.IsNullOrEmpty(diapositiva.Titulo_Right))
                                        {
                                            <div class="slide-preview-content">
                                                @if (!string.IsNullOrEmpty(diapositiva.Titulo_Left))
                                                {
                                                    <div class="preview-text left">@diapositiva.Titulo_Left</div>
                                                }
                                                @if (!string.IsNullOrEmpty(diapositiva.Titulo_Right))
                                                {
                                                    <div class="preview-text right">@diapositiva.Titulo_Right</div>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="slide-actions">
                                        <button class="btn-slide-action edit" @onclick:stopPropagation="true" @onclick="() => EditarDiapositiva(diapositiva)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="btn-slide-action delete" @onclick:stopPropagation="true" @onclick="() => EliminarDiapositiva(diapositiva)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (diapositivaSeleccionada != null)
                        {
                            <div class="slide-editor">
                                <div class="editor-header">
                                    <h3>Editar Diapositiva #@diapositivaSeleccionada.Orden</h3>
                                    <button class="btn-close" @onclick="CerrarEditor">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>

                                <div class="editor-content">
                                    <div class="form-group">
                                        <label>Imagen de Fondo</label>
                                        <input type="text" class="form-control" @bind="diapositivaSeleccionada.ImageUrl" placeholder="URL de la imagen de fondo" />
                                        @if (string.IsNullOrEmpty(diapositivaSeleccionada.ImageUrl))
                                        {
                                            <div class="validation-message">La imagen de fondo es requerida</div>
                                        }
                                    </div>

                                    <div class="editor-columns">
                                        <div class="editor-column">
                                            <h4>Contenido Izquierdo</h4>

                                            <div class="form-group">
                                                <div class="checkbox-wrapper">
                                                    <input type="checkbox" id="tituloLeftActive" @bind="diapositivaSeleccionada.IsTituloLeftActive" />
                                                    <label for="tituloLeftActive">Mostrar título izquierdo</label>
                                                </div>
                                            </div>

                                            @if (diapositivaSeleccionada.IsTituloLeftActive)
                                            {
                                                <div class="form-group">
                                                    <label>Título</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.Titulo_Left" placeholder="Título izquierdo" />
                                                </div>

                                                <div class="form-group">
                                                    <label>Subtítulo</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.SubTitulo_Left" placeholder="Subtítulo izquierdo" />
                                                </div>
                                            }

                                            <div class="form-group">
                                                <div class="checkbox-wrapper">
                                                    <input type="checkbox" id="buttonLeftActive" @bind="diapositivaSeleccionada.IsButtonLeftActive" />
                                                    <label for="buttonLeftActive">Mostrar botón izquierdo</label>
                                                </div>
                                            </div>

                                            @if (diapositivaSeleccionada.IsButtonLeftActive)
                                            {
                                                <div class="form-group">
                                                    <label>Texto del Botón</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.TextButton_Left" placeholder="Texto del botón" />
                                                </div>

                                                <div class="form-group">
                                                    <label>Enlace del Botón</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.LinkButton_Left" placeholder="URL del enlace" />
                                                </div>
                                            }
                                        </div>

                                        <div class="editor-column">
                                            <h4>Contenido Derecho</h4>

                                            <div class="form-group">
                                                <div class="checkbox-wrapper">
                                                    <input type="checkbox" id="tituloRightActive" @bind="diapositivaSeleccionada.IsTituloRightActive" />
                                                    <label for="tituloRightActive">Mostrar título derecho</label>
                                                </div>
                                            </div>

                                            @if (diapositivaSeleccionada.IsTituloRightActive)
                                            {
                                                <div class="form-group">
                                                    <label>Título</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.Titulo_Right" placeholder="Título derecho" />
                                                </div>

                                                <div class="form-group">
                                                    <label>Subtítulo</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.SubTitulo_Right" placeholder="Subtítulo derecho" />
                                                </div>
                                            }

                                            <div class="form-group">
                                                <div class="checkbox-wrapper">
                                                    <input type="checkbox" id="buttonRightActive" @bind="diapositivaSeleccionada.IsButtonRightActive" />
                                                    <label for="buttonRightActive">Mostrar botón derecho</label>
                                                </div>
                                            </div>

                                            @if (diapositivaSeleccionada.IsButtonRightActive)
                                            {
                                                <div class="form-group">
                                                    <label>Texto del Botón</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.TextButton_Right" placeholder="Texto del botón" />
                                                </div>

                                                <div class="form-group">
                                                    <label>Enlace del Botón</label>
                                                    <input type="text" class="form-control" @bind="diapositivaSeleccionada.LinkButton_Right" placeholder="URL del enlace" />
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label>Animación</label>
                                        <select class="form-control" @bind="diapositivaSeleccionada.Animacion">
                                            <option value="">Sin animación</option>
                                            <option value="fade">Desvanecer</option>
                                            <option value="slide">Deslizar</option>
                                            <option value="zoom">Zoom</option>
                                            <option value="flip">Voltear</option>
                                        </select>
                                    </div>

                                    <div class="editor-preview">
                                        <h4>Vista Previa</h4>
                                        <div class="preview-frame" style="background-image: url('@diapositivaSeleccionada.ImageUrl')">
                                            @if (diapositivaSeleccionada.IsTituloLeftActive)
                                            {
                                                <div class="preview-content left">
                                                    <h5>@diapositivaSeleccionada.Titulo_Left</h5>
                                                    <p>@diapositivaSeleccionada.SubTitulo_Left</p>
                                                    @if (diapositivaSeleccionada.IsButtonLeftActive)
                                                    {
                                                        <button class="preview-button">@diapositivaSeleccionada.TextButton_Left</button>
                                                    }
                                                </div>
                                            }

                                            @if (diapositivaSeleccionada.IsTituloRightActive)
                                            {
                                                <div class="preview-content right">
                                                    <h5>@diapositivaSeleccionada.Titulo_Right</h5>
                                                    <p>@diapositivaSeleccionada.SubTitulo_Right</p>
                                                    @if (diapositivaSeleccionada.IsButtonRightActive)
                                                    {
                                                        <button class="preview-button">@diapositivaSeleccionada.TextButton_Right</button>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="editor-actions">
                                        <button class="btn-secondary" @onclick="CerrarEditor">Cancelar</button>
                                        <button class="btn-primary" @onclick="GuardarDiapositiva">Guardar Cambios</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }

    @if (mostrarModalEliminar)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h2>Confirmar eliminación</h2>
                    <button class="modal-close" @onclick="CancelarEliminar">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar esta diapositiva?</p>
                    <p class="warning-text">Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn-danger" @onclick="ConfirmarEliminarDiapositiva">Eliminar</button>
                </div>
            </div>
        </div>
    }
</div>

<script>
    // Funcion para inicializar Sortable.js
    window.initSortable = function (containerId, dotnetHelper) {
    const container = document.getElementById(containerId);
    if (!container) return;

    // Requiere la biblioteca Sortable.js
    if (typeof Sortable !== 'undefined') {
    const sortable = Sortable.create(container, {
    animation: 150,
    handle: '.slide-drag-handle',
    ghostClass: 'slide-ghost',
    onEnd: function (evt) {
    // Obtener los IDs de las diapositivas en el nuevo orden
    const slideIds = Array.from(container.querySelectorAll('.slide-item'))
    .map(item => parseInt(item.getAttribute('data-id')));

    // Llamar al método .NET para actualizar el orden
    dotnetHelper.invokeMethodAsync('OnSlidesReordered', slideIds);
    }
    });
    } else {
    console.error('Sortable.js is not loaded. Please include the library.');
    }
    };

</script>

@code {
    [Parameter]
    public int? id { get; set; }

    private bool isLoading = true;
    private bool isEditing => id.HasValue;
    private Presentaciones presentacion = new();
    private List<Diapositivas> diapositivas = new();
    private PresentacionesDiapositivas detalle = new();
    private Diapositivas? diapositivaSeleccionada;
    private Diapositivas? diapositivaAEliminar;
    private bool mostrarModalEliminar = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (isEditing)
            {
                presentacion = await presentacionesService.SearchByIdAsync(id.Value);

                diapositivas = presentacion.PresentacionesDiapositivas
                .Select(d => d.Diapositiva)
                    .ToList();
            }
            else
            {
                presentacion = new Presentaciones
                    {
                        FechaCreacion = DateTime.Now,
                        EsActiva = false
                    };
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar la presentación: {ex.Message}");
            NavigationManager.NavigateTo(Urls.Advanced.Presentacion);
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inicializar el sortable para arrastrar y soltar
            await JSRuntime.InvokeVoidAsync("initSortable", "slides-sortable", DotNetObjectReference.Create(this));
        }
    }

    private void AgregarDiapositiva()
    {
        // Crear nueva diapositiva con el siguiente orden
        var nuevoOrden = diapositivas.Any() ? diapositivas.Max(d => d.Orden) + 1 : 1;

        var nuevaDiapositiva = new Diapositivas
            {
                DiapositivaId = -1 * (diapositivas.Count + 1), // ID temporal negativo para nuevas diapositivas
                Orden = nuevoOrden,
                ImageUrl = "https://placehold.co/1400x720/5E3023/C08552?text=Cute+\nDog+And+Cat+\n_Pawfect+Match_&font=roboto",
                IsTituloLeftActive = false,
                IsTituloRightActive = false,
                IsButtonLeftActive = false,
                IsButtonRightActive = false,
                Animacion = ""
            };

        diapositivas.Add(nuevaDiapositiva);
        SeleccionarDiapositiva(nuevaDiapositiva);
    }

    private void SeleccionarDiapositiva(Diapositivas diapositiva)
    {
        diapositivaSeleccionada = diapositiva;
    }

    private void EditarDiapositiva(Diapositivas diapositiva)
    {
        diapositivaSeleccionada = diapositiva;
    }

    private void EliminarDiapositiva(Diapositivas diapositiva)
    {
        diapositivaAEliminar = diapositiva;
        mostrarModalEliminar = true;
    }

    private void CancelarEliminar()
    {
        diapositivaAEliminar = null;
        mostrarModalEliminar = false;
    }

    private void ConfirmarEliminarDiapositiva()
    {
        if (diapositivaAEliminar != null)
        {
            diapositivas.Remove(diapositivaAEliminar);

            // Si la diapositiva eliminada era la seleccionada, cerrar el editor
            if (diapositivaSeleccionada == diapositivaAEliminar)
            {
                diapositivaSeleccionada = null;
            }

            // Reordenar las diapositivas restantes
            ReordenarDiapositivas();

            mostrarModalEliminar = false;
            diapositivaAEliminar = null;

            ToastService.ShowSuccess("Diapositiva eliminada correctamente");
        }
    }

    private void ReordenarDiapositivas()
    {
        // Asignar nuevos numeros de orden secuenciales
        int orden = 1;
        foreach (var diapositiva in diapositivas.OrderBy(d => d.Orden))
        {
            diapositiva.Orden = orden++;
        }
    }

    private void CerrarEditor()
    {
        diapositivaSeleccionada = null;
    }

    private void GuardarDiapositiva()
    {
        if (diapositivaSeleccionada != null)
        {
            // Validar campos requeridos
            if (string.IsNullOrEmpty(diapositivaSeleccionada.ImageUrl))
            {
                ToastService.ShowError("La imagen de fondo es requerida");
                return;
            }

            // La diapositiva ya esta en la lista, solo actualizamos la UI
            StateHasChanged();

            ToastService.ShowSuccess("Diapositiva guardada correctamente");
            CerrarEditor();
        }
    }

    private async Task GuardarPresentacion()
    {
        // Validar campos requeridos
        if (string.IsNullOrEmpty(presentacion.Titulo))
        {
            ToastService.ShowError("El título de la presentación es requerido");
            return;
        }

        if (!diapositivas.Any())
        {
            ToastService.ShowError("Debe agregar al menos una diapositiva");
            return;
        }

        try
        {
            //Guardar la presentacion y sus diapositivas
            bool resultado = await presentacionesService.SaveAsync(presentacion, diapositivas);

            if (resultado)
            {
                ToastService.ShowSuccess("Presentación guardada correctamente");
                NavigationManager.NavigateTo(Urls.Advanced.Presentacion);
            }
            else
            {
                ToastService.ShowError("Error al guardar la presentación");
            }


            // var nuevoDetalle = new PresentacionesDiapositivas
            //     {
            //         PresentacionId = detalle.PresentacionId,
            //         DiapositivaId = detalle.DiapositivaId,
            //         Orden = detalle.Orden
            //     };

            // presentacion.PresentacionesDiapositivas.Add(nuevoDetalle);

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo(Urls.Advanced.Presentacion);
    }

    [JSInvokable]
    public void OnSlidesReordered(int[] slideIds)
    {
        // Actualizar el orden de las diapositivas según el arreglo recibido de JavaScript
        for (int i = 0; i < slideIds.Length; i++)
        {
            var slide = diapositivas.FirstOrDefault(d => d.DiapositivaId == slideIds[i]);
            if (slide != null)
            {
                slide.Orden = i + 1;
            }
        }

        StateHasChanged();
    }
}