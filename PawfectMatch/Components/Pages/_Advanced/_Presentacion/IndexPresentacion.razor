@page "/Advanced/Presentaciones"
@inject PresentacionesService presentacionesService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<link rel="stylesheet" href="@Assets["Presentaciones.css"]" />


<div class="presentaciones-container">
    <div class="presentaciones-header">
        <h1 class="presentaciones-title">Gestión de Presentaciones</h1>
        <a href="@Urls.Advanced.CrearPresentacion" class="btn-create">
            <i class="fas fa-plus-circle"></i> Crear Presentación
        </a>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando presentaciones...</p>
        </div>
    }
    else if (presentaciones == null || !presentaciones.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-images"></i>
            </div>
            <h2>No hay presentaciones disponibles</h2>
            <p>Crea tu primera presentación para mostrar en la página principal.</p>
            <a href="@Urls.Advanced.CrearPresentacion" class="btn-primary">
                <i class="fas fa-plus-circle"></i> Crear Presentación
            </a>
        </div>
    }
    else
    {
        <div class="presentaciones-grid">
            @foreach (var presentacion in presentaciones)
            {
                <div class="presentacion-card @(presentacion.EsActiva ? "active" : "")" @onclick="() => ActivarPresentacion(presentacion.PresentacionId)">
                    <div class="presentacion-header">
                        <h3 class="presentacion-title">@presentacion.Titulo</h3>
                        @if (presentacion.EsActiva)
                        {
                            <div class="active-badge">
                                <i class="fas fa-check-circle"></i> Activa
                            </div>
                        }
                    </div>

                    <div class="presentacion-preview">
                        @if (presentacion.PresentacionesDiapositivas.Any())
                        {
                            <div class="preview-grid">
                                @foreach (var diapositiva in presentacion.PresentacionesDiapositivas.OrderBy(pd => pd.Orden).Take(4))
                                {
                                    <div class="preview-slide" style="background-image: url('@diapositiva.Diapositiva.ImageUrl')">
                                        <div class="slide-number">@diapositiva.Orden</div>
                                    </div>
                                }
                            </div>
                            <div class="slide-count">
                                <i class="fas fa-layer-group"></i> @presentacion.PresentacionesDiapositivas.Count() diapositivas
                            </div>
                        }
                        else
                        {
                            <div class="no-slides">
                                <i class="fas fa-image"></i>
                                <p>Sin diapositivas</p>
                            </div>
                        }
                    </div>

                    <div class="presentacion-footer">
                        <div class="presentacion-date">
                            <i class="fas fa-calendar-alt"></i> @presentacion.FechaCreacion.ToString("dd/MM/yyyy")
                        </div>
                        <div class="presentacion-actions">
                            <a href="@($"/Advanced/Presentaciones/Editar/{presentacion.PresentacionId}")" class="btn-edit" @onclick:stopPropagation="true">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <button class="btn-delete" @onclick:stopPropagation="true" @onclick="() => ConfirmarEliminar(presentacion)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (presentacionAEliminar != null)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h2>Confirmar eliminación</h2>
                    <button class="modal-close" @onclick="CancelarEliminar">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar la presentación <strong>@presentacionAEliminar.Titulo</strong>?</p>
                    <p class="warning-text">Esta acción no se puede deshacer y eliminará todas las diapositivas asociadas.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn-danger" @onclick="EliminarPresentacion">Eliminar</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Presentaciones>? presentaciones;
    private bool isLoading = true;
    private Presentaciones? presentacionAEliminar;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarPresentaciones();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CargarPresentaciones()
    {
        presentaciones = await presentacionesService.ListAsync(p => true);

        presentaciones = presentaciones
            .OrderByDescending(p => p.EsActiva)
            .ThenByDescending(p => p.FechaCreacion)
            .ToList();
    }

    private async Task ActivarPresentacion(int id)
    {
        try
        {
            bool resultado = await presentacionesService.SetActive(id);

            if (resultado)
            {
                ToastService.ShowSuccess("Presentación activada correctamente");
                await CargarPresentaciones();
            }
            else
            {
                ToastService.ShowError("No se pudo activar la presentación");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }

    private void ConfirmarEliminar(Presentaciones presentacion)
    {
        presentacionAEliminar = presentacion;
    }

    private void CancelarEliminar()
    {
        presentacionAEliminar = null;
    }

    private async Task EliminarPresentacion()
    {
        if (presentacionAEliminar == null) return;

        try
        {
            bool resultado = await presentacionesService.DeleteAsync(presentacionAEliminar.PresentacionId);

            if (resultado)
            {
                ToastService.ShowSuccess("Presentación eliminada correctamente");
                await CargarPresentaciones();
            }
            else
            {
                ToastService.ShowError("No se pudo eliminar la presentación");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            presentacionAEliminar = null;
        }
    }
}