@rendermode InteractiveServer

@inject PresentacionesService presentacionesService
@implements IDisposable
@using System.Timers


@if (Presentacion is null)
{
    <p>Cargando presentación...</p>
}
else
{
    <div class="carousel">
        <ul>
            @for (int i = 0; i < Diapositivas.Count; i++)
            {
                <li style="display: @(i == activeIndex ? "block" : "none"); ">
                    <ShowDiapositiva diapositiva="Diapositivas[i]" />
                </li>
            }
        </ul>

        <div class="slideSelector">
            @for (int i = 0; i < Diapositivas.Count; i++)
            {
                var index = i; // <-- Fixes closure issue
                <button type="button"
                        class="dot @(index == activeIndex ? "active" : "")"
                        @onclick="@(async () => await SetSlide(index))">
                    ●
                </button>
            }

        </div>

    </div>
}

@code {
    Presentaciones? Presentacion { get; set; }
    List<Diapositivas> Diapositivas { get; set; } = new();
    private int timerSeconds { get; set; } = 15;

    private Timer? slideTimer;

    protected override async Task OnInitializedAsync()
    {
        Presentacion = await presentacionesService.GetActiveAsync();

        if (Presentacion is not null)
        {
            Diapositivas = Presentacion.PresentacionesDiapositivas
                .Select(pd => pd.Diapositiva)
                .ToList();
        }
        else
        {
            Presentacion = new();
            Diapositivas = new()
        {
            new()
            {
                ImageUrl = "https://placehold.co/1400x720/5E3023/C08552?text=Cute+\nDog+And+AAAAAAAA+\n_Pawfect+Match_&font=roboto"
            }
        };
        }

        StartSlideTimer();
    }

    private void StartSlideTimer()
    {
        slideTimer = new Timer(timerSeconds * 1000);
        slideTimer.Elapsed += async (_, _) => await ChangeSlideAsync();
        slideTimer.AutoReset = true;
        slideTimer.Enabled = true;
    }

    private async Task ChangeSlideAsync()
    {
        activeIndex = (activeIndex + 1) % Diapositivas.Count;

        // Blazor component update must be on UI thread
        await InvokeAsync(StateHasChanged);
    }

    public int activeIndex = 0;

    public async Task SetSlide(int index)
    {
        activeIndex = index;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        slideTimer?.Stop();
        slideTimer?.Dispose();
    }

}
