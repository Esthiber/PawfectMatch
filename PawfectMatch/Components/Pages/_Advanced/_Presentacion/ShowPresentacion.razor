@rendermode InteractiveServer

@inject PresentacionesService presentacionesService
@implements IDisposable
@using System.Timers

@if (Presentacion is null)
{
    <p>Cargando presentación...</p>
}
else
{
    <div class="carousel">
        <ul>
            @for (int i = 0; i < Diapositivas.Count; i++)
            {
                <li style="display: @(i == activeIndex ? "block" : "none"); ">
                    <div class="d-diapositiva">
                        <img class="d-bg-img" src="@Diapositivas[i].ImageUrl" />
                    </div>
                </li>
            }
        </ul>

        <div class="slideSelector">
            @for (int i = 0; i < Diapositivas.Count; i++)
            {
                var index = i; // <-- Fixes clousure issues issues issues y ya
                <button type="button"
                        class="dot @(index == activeIndex ? "active" : "")"
                        @onclick="@(async () => await SetSlide(index))">
                    ●
                </button>
            }

        </div>

    </div>

    @*Titulo izquierda*@
    <div class="hero-overlay">
        <div class="hero-content">
            @if (@Diapositivas[activeIndex].IsTituloLeftActive)
            {
                <h1>@Diapositivas[activeIndex]?.Titulo_Left</h1>
                <p>@Diapositivas[activeIndex]?.SubTitulo_Left</p>
            }
            @if ((bool)Diapositivas[activeIndex]?.IsButtonLeftActive)
            {
                <div class="hero-buttons">
                    <a class="btn btn-primary" href="@Diapositivas[activeIndex].LinkButton_Left">
                        <i class="bi bi-search-heart"></i> @Diapositivas[activeIndex]?.TextButton_Left
                    </a>
                    <a class="btn btn-outline" href="@Urls.General.Nosotros">
                        <i class="bi bi-info-circle"></i> Como Funciona
                    </a>
                </div>
            }
        </div>
    </div>
    @*Titulo izquierda*@
    <div class="hero-overlay-right">
        <div class="hero-content">
            @if (@Diapositivas[activeIndex].IsTituloRightActive)
            {
                <h1>@Diapositivas[activeIndex]?.Titulo_Right</h1>
                <p>@Diapositivas[activeIndex]?.SubTitulo_Right</p>
            }
            @if ((bool)Diapositivas[activeIndex]?.IsButtonRightActive)
            {
                <div class="hero-buttons">
                    <a class="btn btn-primary" href="@Diapositivas[activeIndex].LinkButton_Left">
                        <i class="bi bi-search-heart"></i> @Diapositivas[activeIndex]?.TextButton_Right
                    </a>
                    <a class="btn btn-outline" href="@Urls.General.Nosotros">
                        <i class="bi bi-info-circle"></i> Como Funciona
                    </a>
                </div>
            }
        </div>
    </div>
}

@code {
    Presentaciones? Presentacion { get; set; }
    List<Diapositivas> Diapositivas { get; set; } = new();
    private int timerSeconds { get; set; } = 15;

    private Timer? slideTimer;

    protected override async Task OnInitializedAsync()
    {
        Presentacion = await presentacionesService.GetActiveAsync();

        if (Presentacion is not null)
        {
            Diapositivas = Presentacion.PresentacionesDiapositivas
                .Select(pd => pd.Diapositiva)
                .ToList();
        }
        else
        {
            Presentacion = new();
            Diapositivas = new()
        {
            new()
            {
                ImageUrl = "https://placehold.co/1400x720/5E3023/C08552?text=Cute+\nDog+And+AAAAAAAA+\n_Pawfect+Match_&font=roboto"
            }
        };
        }

        StartSlideTimer();
    }

    private void StartSlideTimer()
    {
        slideTimer = new Timer(timerSeconds * 1000);
        slideTimer.Elapsed += async (_, _) => await ChangeSlideAsync();
        slideTimer.AutoReset = true;
        slideTimer.Enabled = true;
    }

    private async Task ChangeSlideAsync()
    {
        activeIndex = (activeIndex + 1) % Diapositivas.Count;

        // Blazor component update must be on UI thread
        await InvokeAsync(StateHasChanged);
    }

    public int activeIndex = 0;

    public async Task SetSlide(int index)
    {
        activeIndex = index;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        slideTimer?.Stop();
        slideTimer?.Dispose();
    }

}
