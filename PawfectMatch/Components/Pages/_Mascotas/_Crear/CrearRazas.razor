@inject RazasService razasService
@inject CategoriasServices categoriasService
@rendermode InteractiveServer

<EditForm Model="@raza" OnValidSubmit="CrearRaza">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Categoría:</label>
        <InputSelect class="form-control" @bind-Value="raza.CategoriaId">
            <option value="">Seleccione una categoría</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => raza.CategoriaId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Nombre de la raza:</label>
        <InputText @bind-Value="raza.Nombre" class="form-control" />
        <ValidationMessage For="@(() => raza.Nombre)" />
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Crear</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>

    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success mt-3">@mensajeExito</div>
    }

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
</EditForm>

@code {
    private Razas raza = new();
    private List<Categorias> categorias = new();
    private string? mensajeExito;
    private string? error;
    [Parameter]
    public EventCallback OnCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categorias = await categoriasService.ListAsync(c => true);
    }

    private async Task CrearRaza()
    {
        mensajeExito = error = null;

        if (raza.CategoriaId == 0 || string.IsNullOrWhiteSpace(raza.Nombre))
        {
            error = "Debe completar todos los campos.";
            return;
        }

        bool guardado = await razasService.InsertAsync(raza);
        if (guardado)
        {
            mensajeExito = "¡Raza creada con éxito!";
            raza = new();
            await OnCreated.InvokeAsync();
        }
        else
        {
            error = "No se pudo crear la raza.";
        }
    }

    private void Cancelar()
    {
        raza = new();
        mensajeExito = error = null;
    }
}
