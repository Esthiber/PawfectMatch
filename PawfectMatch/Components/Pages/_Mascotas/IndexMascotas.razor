@page "/Mascotas"

@inject MascotasService mascotasService
@inject RelacionSizesService relacionSizesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Mascotas en Adopción | Pawfect Match</PageTitle>

<div class="mascotas-page">
    <h3 class="mb-4">Mascotas en Adopción</h3>

    <div class="search-section">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="search-input-group">
                    <i class="bi bi-search"></i>
                    <InputText type="text"
                               class="form-control"
                               placeholder="Buscar por nombre..."
                               @bind-Value="nombreFiltro"
                               @onkeyup="AplicarFiltros" />

                    @if (!string.IsNullOrEmpty(nombreFiltro))
                    {
                        <button class="btn-clear" @onclick="() => { nombreFiltro = string.Empty; AplicarFiltros(); }">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="col-md-4">
                <div class="search-input-group">
                    <i class="bi bi-calendar-event"></i>
                    <InputSelect class="form-select" @bind-Value="edadFiltro" @onchange="AplicarFiltros">
                        <option value="">Todas las edades</option>
                        <option value="cachorro">Cachorro (0-1 año)</option>
                        <option value="joven">Joven (1-3 años)</option>
                        <option value="adulto">Adulto (3-8 años)</option>
                        <option value="senior">Senior (8+ años)</option>
                    </InputSelect>
                </div>
            </div>
            <div class="col-md-4">
                <div class="search-input-group">
                    <i class="bi bi-rulers"></i>
                    <InputSelect class="form-select" @bind-Value="tamanoFiltro" @onchange="AplicarFiltros">
                        <option value="0">Todos los tamaños</option>
                        @foreach (var tamano in relacionesTamano)
                        {
                            <option value="@tamano.RelacionSizeId">@tamano.Size</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>

        <div class="search-actions">
            <button class="btn btn-primary" @onclick="AplicarFiltros">
                <i class="bi bi-search"></i>
            </button>
            <div class="results-count">
                @if (mascotasFiltradas != null)
                {
                    <span>@mascotasFiltradas.Count mascotas encontradas</span>
                }
            </div>
            <div class="filter-actions">
                @if (FiltrosAplicados)
                {
                    <button class="btn btn-outline-secondary btn-sm" @onclick="LimpiarFiltros">
                        <i class="bi bi-x-circle"></i> Limpiar filtros
                    </button>
                }
                <AuthorizeView Roles="Admin">
                    <button class="btn btn-primary" @onclick="gotoCreate">
                        <i class="bi bi-plus-circle"></i> Crear Mascota
                    </button>
                </AuthorizeView>
            </div>
        </div>
    </div>

    <div class="mascotas-container">
        @if (mascotas == null)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p>Cargando mascotas...</p>
            </div>
        }
        else if (!mascotasFiltradas.Any())
        {
            <div class="alert alert-warning">
                @if (FiltrosAplicados)
                {
                    <span>No se encontraron mascotas con los filtros seleccionados. <a @onclick="LimpiarFiltros" @onclick:preventDefault>Limpiar filtros</a></span>
                }
                else
                {
                    <span>No hay mascotas disponibles actualmente.</span>
                }
            </div>
        }
        else
        {
            <div class="row row-cols-2 row-cols-md-4 g-2">
                @foreach (var m in mascotasFiltradas)
                {
                    <CardMascota Mascota="m" OnVerDetalles="VerDetalle"></CardMascota>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Mascotas>? mascotas { get; set; }
    private List<Mascotas> mascotasFiltradas { get; set; } = new();
    private List<RelacionSizes> relacionesTamano { get; set; } = new();

    // Filtros
    private string nombreFiltro = string.Empty;
    private string edadFiltro { get; set; } = string.Empty;
    private int tamanoFiltro { get; set; } = 0;

    private bool FiltrosAplicados =>
        !string.IsNullOrEmpty(nombreFiltro) ||
        !string.IsNullOrEmpty(edadFiltro) ||
        tamanoFiltro != 0;

    protected override async Task OnInitializedAsync()
    {
        // Cargar relaciones de tamaño usando el servicio específico
        relacionesTamano = await relacionSizesService.ListAsync(_ => true);

        // Cargar mascotas disponibles
        mascotas = await mascotasService.ListAsync(m => m.EstadoId == 1);

        // Inicializar mascotas filtradas
        if (mascotas != null)
        {
            mascotasFiltradas = mascotas.ToList();
        }
    }

    private void AplicarFiltros()
    {
        if (mascotas == null) return;

        mascotasFiltradas = mascotas.ToList();

        // Filtrar por nombre
        if (!string.IsNullOrEmpty(nombreFiltro))
        {
            mascotasFiltradas = mascotasFiltradas
                .Where(m => m.Nombre.Contains(nombreFiltro, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Filtrar por edad
        if (!string.IsNullOrEmpty(edadFiltro))
        {
            var fechaActual = DateOnly.FromDateTime(DateTime.Today);

            mascotasFiltradas = edadFiltro switch
            {
                "cachorro" => mascotasFiltradas
                    .Where(m => CalcularEdadEnAnos(m.FechaNacimiento) < 1)
                    .ToList(),
                "joven" => mascotasFiltradas
                    .Where(m => CalcularEdadEnAnos(m.FechaNacimiento) >= 1 && CalcularEdadEnAnos(m.FechaNacimiento) < 3)
                    .ToList(),
                "adulto" => mascotasFiltradas
                    .Where(m => CalcularEdadEnAnos(m.FechaNacimiento) >= 3 && CalcularEdadEnAnos(m.FechaNacimiento) < 8)
                    .ToList(),
                "senior" => mascotasFiltradas
                    .Where(m => CalcularEdadEnAnos(m.FechaNacimiento) >= 8)
                    .ToList(),
                _ => mascotasFiltradas
            };
        }

        // Filtrar por tamaño
        if (tamanoFiltro != 0)
        {
            mascotasFiltradas = mascotasFiltradas
                .Where(m => m.RelacionSizeId == tamanoFiltro)
                .ToList();
        }
    }

    private int CalcularEdadEnAnos(DateOnly fechaNacimiento)
    {
        var hoy = DateOnly.FromDateTime(DateTime.Today);
        int edad = hoy.Year - fechaNacimiento.Year;

        if (fechaNacimiento.AddYears(edad) > hoy)
        {
            edad--;
        }

        return edad;
    }

    private void LimpiarFiltros()
    {
        nombreFiltro = string.Empty;
        edadFiltro = string.Empty;
        tamanoFiltro = 0;

        if (mascotas != null)
        {
            mascotasFiltradas = mascotas.ToList();
        }
    }

    private void VerDetalle(int id)
    {
        navigationManager.NavigateTo($"{Urls.Mascotas.Detalle}{id}");
    }

    public void gotoCreate()
    {
        navigationManager.NavigateTo(Urls.Mascotas.Crear);
    }
}