@page "/mascotas/editar/{id:int}"
@using Blazored.Toast.Services

@attribute [Authorize(Roles = "Admin")]

@inject MascotasService mascotasService
@inject RazasService razasService
@inject SexosService sexosService
@inject CategoriasServices categoriasServices
@inject RelacionSizesService relacionSizesService
@inject EstadosService estadosService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@rendermode InteractiveServer

<div class="mascota-container">
    <div class="mascota-header">
        <h1 class="mascota-title">Editar Mascota</h1>
        <div class="mascota-actions">
            <button class="btn-secondary" @onclick="Volver">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
        </div>
    </div>

    @if (mascota is null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando información de la mascota...</p>
        </div>
    }
    else
    {
        <div class="mascota-form-container">
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>@error</span>
                </div>
            }

            <EditForm Model="@mascota" OnValidSubmit="ActualizarMascota" class="mascota-form">
                <DataAnnotationsValidator />

                <div class="validation-summary">
                    <ValidationSummary />
                </div>

                <div class="form-grid">
                    <!-- Información básica -->
                    <div class="form-section">
                        <h2 class="section-title">Información Básica</h2>

                        <div class="form-group">
                            <label for="nombre">Nombre:</label>
                            <InputText id="nombre" @bind-Value="mascota.Nombre" class="form-control" placeholder="Nombre de la mascota" />
                            <ValidationMessage For="@(() => mascota.Nombre)" />
                        </div>

                        <div class="form-group">
                            <label for="categoria">Categoría:</label>
                            <InputSelect id="categoria" @bind-Value="mascota.CategoriaId" class="form-control">
                                <option value="" disabled>Seleccione una categoría</option>
                                @foreach (var cat in categorias)
                                {
                                    <option value="@cat.CategoriaId">@cat.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => mascota.CategoriaId)" />
                        </div>

                        <div class="form-group">
                            <label for="raza">Raza:</label>
                            <InputSelect id="raza" @bind-Value="mascota.RazaId" class="form-control">
                                <option value="" disabled>Seleccione una raza</option>
                                @foreach (var raza in razas)
                                {
                                    <option value="@raza.RazaId">@raza.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => mascota.RazaId)" />
                        </div>

                        <div class="form-group">
                            <label for="sexo">Sexo:</label>
                            <InputSelect id="sexo" @bind-Value="mascota.SexoId" class="form-control">
                                <option value="" disabled>Seleccione un sexo</option>
                                @foreach (var sexo in Sexos)
                                {
                                    <option value="@sexo.SexoId">@sexo.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => mascota.SexoId)" />
                        </div>
                    </div>

                    <!-- Características físicas -->
                    <div class="form-section">
                        <h2 class="section-title">Características Físicas</h2>

                        <div class="form-group">
                            <label for="relacion-size">Relación de Tamaño:</label>
                            <InputSelect id="relacion-size" @bind-Value="mascota.RelacionSizeId" class="form-control">
                                <option value="" disabled>Seleccione una opción</option>
                                @foreach (var size in relacionSizes)
                                {
                                    <option value="@size.RelacionSizeId">@size.Size</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => mascota.RelacionSizeId)" />
                        </div>

                        <div class="form-group">
                            <label for="tamano">Tamaño (pulgadas):</label>
                            <InputNumber id="tamano" @bind-Value="mascota.Tamano" class="form-control" />
                            <ValidationMessage For="@(() => mascota.Tamano)" />
                        </div>

                        <div class="form-group">
                            <label for="fecha-nacimiento">Fecha de nacimiento:</label>
                            <InputDate id="fecha-nacimiento" @bind-Value="mascota.FechaNacimiento" class="form-control" />
                            <ValidationMessage For="@(() => mascota.FechaNacimiento)" />
                        </div>

                        <div class="form-group">
                            <label for="estado">Estado:</label>
                            <InputSelect id="estado" @bind-Value="mascota.EstadoId" class="form-control">
                                <option value="" disabled>Seleccione un estado</option>
                                @foreach (var estado in estados)
                                {
                                    <option value="@estado.EstadoId">@estado.Nombre</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => mascota.EstadoId)" />
                        </div>
                    </div>
                </div>

                <!-- Descripción y foto -->
                <div class="form-section full-width">
                    <h2 class="section-title">Descripción y Foto</h2>

                    <div class="form-group">
                        <label for="descripcion">Descripción:</label>
                        <InputTextArea id="descripcion" @bind-Value="mascota.Descripcion" class="form-control" rows="4" placeholder="Describe la personalidad y características de la mascota" />
                        <ValidationMessage For="@(() => mascota.Descripcion)" />
                    </div>

                    <div class="form-group">
                        <label for="foto-url">Foto (URL):</label>
                        <InputText id="foto-url" @bind-Value="mascota.FotoUrl" class="form-control" placeholder="URL de la imagen" />
                        <ValidationMessage For="@(() => mascota.FotoUrl)" />

                        @if (!string.IsNullOrEmpty(mascota.FotoUrl))
                        {
                            <div class="image-preview">
                                <img src="@mascota.FotoUrl" alt="Vista previa" />
                            </div>
                        }
                    </div>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-secondary" @onclick="Volver">Cancelar</button>
                    <button type="submit" class="btn-primary">Actualizar Mascota</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }

    private Mascotas? mascota;
    private List<Razas> razas = new();
    private List<Sexos> Sexos = new();
    private List<Categorias> categorias = new();
    private List<RelacionSizes> relacionSizes = new();
    private List<Estados> estados = new();
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar los datos: {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        // Cargar listas de opciones
        categorias = await categoriasServices.ListAsync(x => true);
        razas = await razasService.ListAsync(x => true);
        relacionSizes = await relacionSizesService.ListAsync(x => true);
        estados = await estadosService.ListAsync(x => true);
        Sexos = await sexosService.ListAsync(x => true);

        // Cargar la mascota a editar
        mascota = await mascotasService.SearchByIdAsync(id);

        if (mascota == null || mascota.MascotaId == 0)
        {
            error = "No se encontró la mascota solicitada";
            NavigationManager.NavigateTo("/mascotas");
        }
    }

    private async Task ActualizarMascota()
    {
        try
        {
            if (mascota != null)
            {
                bool actualizado = await mascotasService.SaveAsync(mascota);
                if (actualizado)
                {
                    ToastService.ShowSuccess("Mascota actualizada exitosamente");
                    NavigationManager.NavigateTo("/mascotas");
                }
                else
                {
                    error = "No se pudo actualizar la mascota";
                    ToastService.ShowError(error);
                }
            }
        }
        catch (Exception ex)
        {
            error = $"Error al actualizar: {ex.Message}";
            ToastService.ShowError(error);
        }
    }

    private void Volver() => NavigationManager.NavigateTo("/mascotas");
}