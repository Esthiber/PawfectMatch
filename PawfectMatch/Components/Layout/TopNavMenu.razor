@inject NavigationManager NavigationManager
@inject MascotasService mascotasService
@rendermode InteractiveServer

<div class="nav-menu">
    <div class="logo-container">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <img src="@Assets["/img/logo/logo0.png"]" />
        </NavLink>
    </div>
    <div class="navigation-buttons">
        <NavLink href="@Urls.Mascotas.Index">
            <div class="nav-btn">
                <div class="text">Mascotas</div>
            </div>
        </NavLink>
        <NavLink href="@Urls.General.Nosotros">
            <div class="nav-btn">
                <div class="text">Nosotros</div>
            </div>
        </NavLink>
    </div>
    <NavLink @onclick="GoToRandomMascota" style="cursor:pointer;">
        <div class="main-nav-btn">
            <div class="text2">¡ Descubrir !</div>
        </div>
    </NavLink>

    <div class="user-btn">
        <img class="user" src="@Assets["/img/icons/user0.svg"]" @onclick="pointerEnter" />
        @if (showUserMenu)
        {
            <div class="usermenu-container">
                <UserMenu OnClose="pointerLeave" />
            </div>
        }
    </div>
</div>

@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public bool showUserMenu { get; set; } = false;
    private void pointerEnter() => showUserMenu = true;
    private void pointerLeave() => showUserMenu = false;



    private async Task<Mascotas?> RandomMascota()
    {
        var mascotas = await mascotasService.ListAsync(m => true) ?? new();

        var randomMascota = mascotas
            .Where(m => m.EstadoId == 1)
            .OrderBy(_ => Guid.NewGuid())
            .FirstOrDefault();

        return randomMascota;
    }

    private async Task GoToRandomMascota()
    {
        var m = await RandomMascota() ?? new();

        NavigationManager.NavigateTo($"{Urls.Mascotas.Detalle}{m.MascotaId}");
    }
}
