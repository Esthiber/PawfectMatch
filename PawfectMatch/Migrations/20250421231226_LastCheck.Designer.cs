// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PawfectMatch.Data;

#nullable disable

namespace PawfectMatch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421231226_LastCheck")]
    partial class LastCheck
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PawfectMatch.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PawfectMatch.Models.Adoptantes", b =>
                {
                    b.Property<int>("AdoptanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdoptanteId"));

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdoptanteId");

                    b.HasIndex("Id");

                    b.ToTable("Adoptantes");
                });

            modelBuilder.Entity("PawfectMatch.Models.Citas", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitaId"));

                    b.Property<int>("AdoptanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.HasKey("CitaId");

                    b.HasIndex("AdoptanteId");

                    b.HasIndex("MascotaId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("PawfectMatch.Models.Sugerencias", b =>
                {
                    b.Property<int>("SugerenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SugerenciaId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SugerenciaId");

                    b.ToTable("Sugerencias");
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Categorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Nombre = "Perros"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Nombre = "Gatos"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Estados", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            EstadoId = 1,
                            Nombre = "Disponible"
                        },
                        new
                        {
                            EstadoId = 2,
                            Nombre = "Adoptado"
                        },
                        new
                        {
                            EstadoId = 3,
                            Nombre = "No Disponible"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Mascotas", b =>
                {
                    b.Property<int>("MascotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MascotaId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("FotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RazaId")
                        .HasColumnType("int");

                    b.Property<int>("RelacionSizeId")
                        .HasColumnType("int");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<double>("Tamano")
                        .HasColumnType("float");

                    b.HasKey("MascotaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("RelacionSizeId");

                    b.HasIndex("SexoId");

                    b.ToTable("Mascotas");

                    b.HasData(
                        new
                        {
                            MascotaId = 1,
                            CategoriaId = 1,
                            Descripcion = "Es grande es bonito es un perro loco.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2025, 4, 2),
                            FotoUrl = "https://media.istockphoto.com/id/1465311007/es/foto/un-perro-peque%C3%B1o-sonr%C3%ADe-al-due%C3%B1o-peque%C3%B1as-mordeduras-de-mascotas-peligroso-terrier-de-juguete.jpg?s=612x612&w=0&k=20&c=nZzhW0piLl7oIrielT9JA7vAcXqaepnDhCggxD7JZ0I=",
                            Nombre = "Felipe",
                            RazaId = 5,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 25.0
                        },
                        new
                        {
                            MascotaId = 2,
                            CategoriaId = 1,
                            Descripcion = "Es un perrito muy cariñoso y con mucha energia",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2022, 8, 8),
                            FotoUrl = "https://th.bing.com/th/id/OIP.TfniUPx7NqEggeKV9APOZgHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Milo",
                            RazaId = 1,
                            RelacionSizeId = 3,
                            SexoId = 1,
                            Tamano = 18.0
                        },
                        new
                        {
                            MascotaId = 3,
                            CategoriaId = 1,
                            Descripcion = "Es un perrito que adora pasear y comer",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2021, 6, 8),
                            FotoUrl = "https://http2.mlstatic.com/D_NQ_NP_660656-MLM46803871812_072021-F.jpg",
                            Nombre = "Roky",
                            RazaId = 2,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 16.0
                        },
                        new
                        {
                            MascotaId = 4,
                            CategoriaId = 1,
                            Descripcion = "Es un perro jugueton y le gusta dormir",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2024, 3, 8),
                            FotoUrl = "https://th.bing.com/th/id/R.69b9a203e86486a2114bc7380d204970?rik=kimEIahYLupgjQ&pid=ImgRaw&r=0&sres=1&sresct=1",
                            Nombre = "Willi",
                            RazaId = 5,
                            RelacionSizeId = 3,
                            SexoId = 1,
                            Tamano = 24.0
                        },
                        new
                        {
                            MascotaId = 5,
                            CategoriaId = 1,
                            Descripcion = "Es un perrito muy tierno y adora jugar",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2024, 1, 7),
                            FotoUrl = "https://www.publicdomainpictures.net/pictures/180000/velka/chihuaua-puppy.jpg",
                            Nombre = "lali",
                            RazaId = 6,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 9.0
                        },
                        new
                        {
                            MascotaId = 6,
                            CategoriaId = 1,
                            Descripcion = "Es un perrito muy aventurero",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2024, 10, 22),
                            FotoUrl = "https://th.bing.com/th/id/OIP.NA3_b8GubIn0nfMn0w4XDAHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Mango",
                            RazaId = 1,
                            RelacionSizeId = 3,
                            SexoId = 1,
                            Tamano = 16.0
                        },
                        new
                        {
                            MascotaId = 7,
                            CategoriaId = 1,
                            Descripcion = "Le encanta correr y comer",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 11, 8),
                            FotoUrl = "https://th.bing.com/th/id/OIP.EzwbKs8GJQPv0CCPP2GMlQHaD9?rs=1&pid=ImgDetMain",
                            Nombre = "rodolf",
                            RazaId = 7,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 9.0
                        },
                        new
                        {
                            MascotaId = 8,
                            CategoriaId = 1,
                            Descripcion = "Es un perro que adora el cariño y los paseos largos",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2021, 4, 6),
                            FotoUrl = "https://th.bing.com/th/id/OIP.v3rbPJHS2RVJFSlRq_DXTAHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Oli",
                            RazaId = 8,
                            RelacionSizeId = 2,
                            SexoId = 1,
                            Tamano = 10.0
                        },
                        new
                        {
                            MascotaId = 9,
                            CategoriaId = 1,
                            Descripcion = "Es un perro con mucha energia y adora que le den cariño",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 4, 12),
                            FotoUrl = "https://th.bing.com/th/id/OIP.JuzlhHcoLZR61J50nJgftwHaFr?rs=1&pid=ImgDetMain",
                            Nombre = "Lalo",
                            RazaId = 6,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 10.0
                        },
                        new
                        {
                            MascotaId = 10,
                            CategoriaId = 1,
                            Descripcion = "Dócil, juguetona y le encanta estar en brazos.",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2022, 2, 14),
                            FotoUrl = "https://th.bing.com/th/id/OIP.yRLVHRUwgdR4OiOxTPnNDgHaE7?rs=1&pid=ImgDetMain",
                            Nombre = "Nina",
                            RazaId = 4,
                            RelacionSizeId = 2,
                            SexoId = 2,
                            Tamano = 14.0
                        },
                        new
                        {
                            MascotaId = 11,
                            CategoriaId = 1,
                            Descripcion = "Muy protector y obediente.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2020, 5, 9),
                            FotoUrl = "https://th.bing.com/th/id/OIP.qkqCM7eQmJwvj8AkH3u5ngHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Thor",
                            RazaId = 3,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 20.0
                        },
                        new
                        {
                            MascotaId = 12,
                            CategoriaId = 1,
                            Descripcion = "Le gusta dormir y es muy tranquila.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 9, 20),
                            FotoUrl = "https://th.bing.com/th/id/OIP.QcIBbq4tgrIPhU3W0XxvagHaE7?rs=1&pid=ImgDetMain",
                            Nombre = "Luna",
                            RazaId = 9,
                            RelacionSizeId = 3,
                            SexoId = 2,
                            Tamano = 12.0
                        },
                        new
                        {
                            MascotaId = 13,
                            CategoriaId = 1,
                            Descripcion = "Un perro valiente y sociable.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2022, 12, 1),
                            FotoUrl = "https://th.bing.com/th/id/OIP.f3eZqKFb3I53N7QOkz-xaQHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Zeus",
                            RazaId = 2,
                            RelacionSizeId = 2,
                            SexoId = 1,
                            Tamano = 22.0
                        },
                        new
                        {
                            MascotaId = 14,
                            CategoriaId = 1,
                            Descripcion = "Pequeñita, dulce y siempre feliz.",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2021, 7, 17),
                            FotoUrl = "https://th.bing.com/th/id/OIP.F5dOGfGKePtNmliuyzYhiAHaE7?rs=1&pid=ImgDetMain",
                            Nombre = "Mimi",
                            RazaId = 5,
                            RelacionSizeId = 3,
                            SexoId = 2,
                            Tamano = 11.0
                        },
                        new
                        {
                            MascotaId = 15,
                            CategoriaId = 1,
                            Descripcion = "Curioso, travieso pero muy leal.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 1, 5),
                            FotoUrl = "https://th.bing.com/th/id/OIP.7f62UOkFMy3dk9MK-DKrCwHaEK?rs=1&pid=ImgDetMain",
                            Nombre = "Coco",
                            RazaId = 4,
                            RelacionSizeId = 2,
                            SexoId = 1,
                            Tamano = 19.0
                        },
                        new
                        {
                            MascotaId = 16,
                            CategoriaId = 1,
                            Descripcion = "Tiene una energía inagotable, ama jugar con pelotas.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2022, 3, 15),
                            FotoUrl = "https://th.bing.com/th/id/OIP.hKhG7YFi7tvYoXL4o_ArAwHaE7?rs=1&pid=ImgDetMain",
                            Nombre = "Chispa",
                            RazaId = 7,
                            RelacionSizeId = 1,
                            SexoId = 2,
                            Tamano = 10.0
                        },
                        new
                        {
                            MascotaId = 17,
                            CategoriaId = 1,
                            Descripcion = "Fiel y tranquilo, le gusta que lo cepillen.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2021, 11, 25),
                            FotoUrl = "https://th.bing.com/th/id/OIP.EjRBsp3T_z1sjEdQAlm0eQHaFj?rs=1&pid=ImgDetMain",
                            Nombre = "Toby",
                            RazaId = 8,
                            RelacionSizeId = 2,
                            SexoId = 1,
                            Tamano = 18.0
                        },
                        new
                        {
                            MascotaId = 18,
                            CategoriaId = 1,
                            Descripcion = "Una perrita súper tierna, perfecta para compañía.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 2, 10),
                            FotoUrl = "https://th.bing.com/th/id/OIP.ohAyzfrYc6QjFZ3v1nypIAHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Kira",
                            RazaId = 9,
                            RelacionSizeId = 1,
                            SexoId = 2,
                            Tamano = 9.0
                        },
                        new
                        {
                            MascotaId = 19,
                            CategoriaId = 1,
                            Descripcion = "Gran protector, adiestrado y obediente.",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2020, 7, 1),
                            FotoUrl = "https://th.bing.com/th/id/OIP.sAfYcLwUDwKXwJKCdWrjWwHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Axel",
                            RazaId = 3,
                            RelacionSizeId = 3,
                            SexoId = 1,
                            Tamano = 30.0
                        },
                        new
                        {
                            MascotaId = 20,
                            CategoriaId = 1,
                            Descripcion = "Pequeñito pero con un ladrido potente.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2024, 5, 19),
                            FotoUrl = "https://th.bing.com/th/id/OIP.z3Q5VZ8cJ3C07IbEECtkhwHaE7?rs=1&pid=ImgDetMain",
                            Nombre = "Lilo",
                            RazaId = 6,
                            RelacionSizeId = 1,
                            SexoId = 1,
                            Tamano = 6.0
                        },
                        new
                        {
                            MascotaId = 21,
                            CategoriaId = 1,
                            Descripcion = "Muy consentida, le encanta dormir en almohadas.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 6, 3),
                            FotoUrl = "https://th.bing.com/th/id/OIP.ESAKWAbKk7cyEJOLFnIMrAHaE6?rs=1&pid=ImgDetMain",
                            Nombre = "Nube",
                            RazaId = 2,
                            RelacionSizeId = 2,
                            SexoId = 2,
                            Tamano = 17.0
                        },
                        new
                        {
                            MascotaId = 22,
                            CategoriaId = 2,
                            Descripcion = "Gato tranquilo, le encanta dormir y ronronear.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2023, 3, 10),
                            FotoUrl = "https://th.bing.com/th/id/OIP.cAluVwFq_G_AUtMXrP3KYwHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Mishu",
                            RazaId = 10,
                            RelacionSizeId = 2,
                            SexoId = 2,
                            Tamano = 12.0
                        },
                        new
                        {
                            MascotaId = 23,
                            CategoriaId = 2,
                            Descripcion = "Muy hablador y curioso. Siempre quiere estar contigo.",
                            EstadoId = 2,
                            FechaNacimiento = new DateOnly(2021, 9, 15),
                            FotoUrl = "https://th.bing.com/th/id/OIP.3Hu0Z6b-DUYZf_A9GlQXuwHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Simón",
                            RazaId = 11,
                            RelacionSizeId = 2,
                            SexoId = 1,
                            Tamano = 11.0
                        },
                        new
                        {
                            MascotaId = 24,
                            CategoriaId = 2,
                            Descripcion = "Ágil, le encanta explorar todo el lugar.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2022, 1, 22),
                            FotoUrl = "https://th.bing.com/th/id/OIP.nQwMG4DyUqVxgo7BunwYyAHaE8?rs=1&pid=ImgDetMain",
                            Nombre = "Nala",
                            RazaId = 12,
                            RelacionSizeId = 2,
                            SexoId = 2,
                            Tamano = 13.0
                        },
                        new
                        {
                            MascotaId = 25,
                            CategoriaId = 2,
                            Descripcion = "Gran tamaño y corazón. Muy tranquilo.",
                            EstadoId = 1,
                            FechaNacimiento = new DateOnly(2020, 6, 30),
                            FotoUrl = "https://th.bing.com/th/id/OIP.Qo9h1u8q1zB2UrdkMhvCBAHaEK?rs=1&pid=ImgDetMain",
                            Nombre = "Ragnar",
                            RazaId = 13,
                            RelacionSizeId = 3,
                            SexoId = 1,
                            Tamano = 20.0
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Razas", b =>
                {
                    b.Property<int>("RazaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RazaId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RazaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Razas");

                    b.HasData(
                        new
                        {
                            RazaId = 1,
                            CategoriaId = 1,
                            Nombre = "Labrador"
                        },
                        new
                        {
                            RazaId = 2,
                            CategoriaId = 1,
                            Nombre = "Bulldog"
                        },
                        new
                        {
                            RazaId = 3,
                            CategoriaId = 2,
                            Nombre = "Persa"
                        },
                        new
                        {
                            RazaId = 4,
                            CategoriaId = 2,
                            Nombre = "Siamés"
                        },
                        new
                        {
                            RazaId = 5,
                            CategoriaId = 1,
                            Nombre = "Golden Retriever"
                        },
                        new
                        {
                            RazaId = 6,
                            CategoriaId = 1,
                            Nombre = "Chihuahua"
                        },
                        new
                        {
                            RazaId = 7,
                            CategoriaId = 1,
                            Nombre = "Dachshund"
                        },
                        new
                        {
                            RazaId = 8,
                            CategoriaId = 1,
                            Nombre = "Cocker Spaniel"
                        },
                        new
                        {
                            RazaId = 9,
                            CategoriaId = 1,
                            Nombre = "Shih Tzu"
                        },
                        new
                        {
                            RazaId = 10,
                            CategoriaId = 2,
                            Nombre = "Bengalí"
                        },
                        new
                        {
                            RazaId = 11,
                            CategoriaId = 2,
                            Nombre = "Maine Coon"
                        },
                        new
                        {
                            RazaId = 12,
                            CategoriaId = 2,
                            Nombre = "Esfinge"
                        },
                        new
                        {
                            RazaId = 13,
                            CategoriaId = 2,
                            Nombre = "Azul Ruso"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.RelacionSizes", b =>
                {
                    b.Property<int>("RelacionSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelacionSizeId"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelacionSizeId");

                    b.ToTable("RelacionSizes");

                    b.HasData(
                        new
                        {
                            RelacionSizeId = 1,
                            Size = "Pequeño"
                        },
                        new
                        {
                            RelacionSizeId = 2,
                            Size = "Mediano"
                        },
                        new
                        {
                            RelacionSizeId = 3,
                            Size = "Grande"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Sexos", b =>
                {
                    b.Property<int>("SexoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SexoId");

                    b.ToTable("Sexos");

                    b.HasData(
                        new
                        {
                            SexoId = 1,
                            Nombre = "Macho"
                        },
                        new
                        {
                            SexoId = 2,
                            Nombre = "Hembra"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Presentacion.Diapositivas", b =>
                {
                    b.Property<int>("DiapositivaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiapositivaId"));

                    b.Property<string>("Animacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsButtonLeftActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsButtonRightActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTituloLeftActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTituloRightActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkButton_Left")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkButton_Right")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("SubTitulo_Left")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitulo_Right")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextButton_Left")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextButton_Right")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo_Left")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo_Right")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiapositivaId");

                    b.ToTable("Diapositivas");

                    b.HasData(
                        new
                        {
                            DiapositivaId = 1,
                            ImageUrl = "https://images-ext-1.discordapp.net/external/pCPvCTsMyhwvSzSxaPZZ5PG8VfVshz1DMFeTU4VQBFo/https/images8.alphacoders.com/449/thumb-1920-449501.jpg?format=webp&width=1374&height=859",
                            IsButtonLeftActive = true,
                            IsButtonRightActive = false,
                            IsTituloLeftActive = true,
                            IsTituloRightActive = false,
                            LinkButton_Left = "/mascotas",
                            Orden = 1,
                            SubTitulo_Left = "Conectamos mascotas que necesitan un hogar con familias amorosas",
                            TextButton_Left = "Explorar Mascotas",
                            Titulo_Left = "Encuentra a tu compañero perfecto"
                        },
                        new
                        {
                            DiapositivaId = 2,
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/11/29/04/17/dog-1861839_1280.jpg",
                            IsButtonLeftActive = true,
                            IsButtonRightActive = false,
                            IsTituloLeftActive = true,
                            IsTituloRightActive = false,
                            LinkButton_Left = "#",
                            Orden = 2,
                            SubTitulo_Left = "Dale una segunda oportunidad a quienes más lo necesitan",
                            TextButton_Left = "Ver Historias",
                            Titulo_Left = "Adopta, no compres"
                        },
                        new
                        {
                            DiapositivaId = 3,
                            ImageUrl = "https://cdn.pixabay.com/photo/2020/02/06/15/06/dog-4824485_1280.jpg",
                            IsButtonLeftActive = false,
                            IsButtonRightActive = true,
                            IsTituloLeftActive = false,
                            IsTituloRightActive = true,
                            LinkButton_Right = "#testimonials-section",
                            Orden = 3,
                            SubTitulo_Right = "Conoce cómo nuestras mascotas encontraron un hogar lleno de amor",
                            TextButton_Right = "Leer historias",
                            Titulo_Right = "Historias con final feliz"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Presentacion.Presentaciones", b =>
                {
                    b.Property<int>("PresentacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresentacionId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActiva")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PresentacionId");

                    b.ToTable("Presentaciones");

                    b.HasData(
                        new
                        {
                            PresentacionId = 1,
                            Descripcion = "Esta es la presentacion default. No la borre por favor.",
                            EsActiva = true,
                            FechaCreacion = new DateTime(2025, 4, 21, 19, 12, 23, 649, DateTimeKind.Local).AddTicks(8047),
                            Titulo = "Default"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Presentacion.PresentacionesDiapositivas", b =>
                {
                    b.Property<int>("PresentacionDiapositivaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresentacionDiapositivaId"));

                    b.Property<int>("DiapositivaId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("PresentacionId")
                        .HasColumnType("int");

                    b.HasKey("PresentacionDiapositivaId");

                    b.HasIndex("DiapositivaId");

                    b.HasIndex("PresentacionId");

                    b.ToTable("PresentacionesDiapositivas");

                    b.HasData(
                        new
                        {
                            PresentacionDiapositivaId = 1,
                            DiapositivaId = 1,
                            Orden = 1,
                            PresentacionId = 1
                        },
                        new
                        {
                            PresentacionDiapositivaId = 2,
                            DiapositivaId = 2,
                            Orden = 2,
                            PresentacionId = 1
                        },
                        new
                        {
                            PresentacionDiapositivaId = 3,
                            DiapositivaId = 3,
                            Orden = 3,
                            PresentacionId = 1
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Servicios.Servicios", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioId"));

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicioId");

                    b.ToTable("Servicios");

                    b.HasData(
                        new
                        {
                            ServicioId = 1,
                            Costo = 0.0,
                            Descripcion = "Documentos que certifican la propiedad de la mascota.",
                            Nombre = "Documentos de Adopción"
                        },
                        new
                        {
                            ServicioId = 2,
                            Costo = 500.0,
                            Descripcion = "Servicio de vacunación para mascotas.",
                            Nombre = "Vacunación"
                        },
                        new
                        {
                            ServicioId = 3,
                            Costo = 300.0,
                            Descripcion = "Tratamiento para eliminar parásitos internos y externos.",
                            Nombre = "Desparasitación"
                        },
                        new
                        {
                            ServicioId = 4,
                            Costo = 150.0,
                            Descripcion = "Servicio de corte de uñas para mascotas pequeñas y grandes.",
                            Nombre = "Corte de Uñas"
                        },
                        new
                        {
                            ServicioId = 5,
                            Costo = 800.0,
                            Descripcion = "Consulta general con un veterinario calificado.",
                            Nombre = "Consulta Veterinaria"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Servicios.SolicitudesServicios", b =>
                {
                    b.Property<int>("SolicitudServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolicitudServicioId"));

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.Property<int>("SolicitudAdopcionId")
                        .HasColumnType("int");

                    b.HasKey("SolicitudServicioId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("SolicitudAdopcionId");

                    b.ToTable("SolicitudesServicios");
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.EstadoSolicitudes", b =>
                {
                    b.Property<int>("EstadoSolicitudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoSolicitudId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoSolicitudId");

                    b.ToTable("EstadoSolicitudes");

                    b.HasData(
                        new
                        {
                            EstadoSolicitudId = 1,
                            Nombre = "Pendiente"
                        },
                        new
                        {
                            EstadoSolicitudId = 2,
                            Nombre = "Aprobada"
                        },
                        new
                        {
                            EstadoSolicitudId = 3,
                            Nombre = "Rechazada"
                        });
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.HistorialAdopciones", b =>
                {
                    b.Property<int>("HistorialAdopcioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialAdopcioneId"));

                    b.Property<int>("AdoptanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAdopcion")
                        .HasColumnType("datetime2");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistorialAdopcioneId");

                    b.HasIndex("AdoptanteId");

                    b.HasIndex("MascotaId");

                    b.ToTable("HistorialAdopciones");
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.SolicitudesAdopciones", b =>
                {
                    b.Property<int>("SolicitudAdopcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolicitudAdopcionId"));

                    b.Property<int>("AdoptanteId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoSolicitudId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.HasKey("SolicitudAdopcionId");

                    b.HasIndex("AdoptanteId");

                    b.HasIndex("EstadoSolicitudId");

                    b.HasIndex("MascotaId");

                    b.ToTable("SolicitudesAdopciones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PawfectMatch.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PawfectMatch.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PawfectMatch.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PawfectMatch.Models.Adoptantes", b =>
                {
                    b.HasOne("PawfectMatch.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PawfectMatch.Models.Citas", b =>
                {
                    b.HasOne("PawfectMatch.Models.Adoptantes", "Adoptante")
                        .WithMany()
                        .HasForeignKey("AdoptanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.Mascotas", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adoptante");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Mascotas", b =>
                {
                    b.HasOne("PawfectMatch.Models._Mascotas.Categorias", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.Estados", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.RelacionSizes", "RelacionSize")
                        .WithMany()
                        .HasForeignKey("RelacionSizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.Sexos", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Estado");

                    b.Navigation("RelacionSize");

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("PawfectMatch.Models._Mascotas.Razas", b =>
                {
                    b.HasOne("PawfectMatch.Models._Mascotas.Categorias", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("PawfectMatch.Models._Presentacion.PresentacionesDiapositivas", b =>
                {
                    b.HasOne("PawfectMatch.Models._Presentacion.Diapositivas", "Diapositiva")
                        .WithMany()
                        .HasForeignKey("DiapositivaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Presentacion.Presentaciones", "Presentacion")
                        .WithMany("PresentacionesDiapositivas")
                        .HasForeignKey("PresentacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diapositiva");

                    b.Navigation("Presentacion");
                });

            modelBuilder.Entity("PawfectMatch.Models._Servicios.SolicitudesServicios", b =>
                {
                    b.HasOne("PawfectMatch.Models._Servicios.Servicios", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Solicitudes.SolicitudesAdopciones", "SolicitudAdopcion")
                        .WithMany("SolicitudesServicios")
                        .HasForeignKey("SolicitudAdopcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio");

                    b.Navigation("SolicitudAdopcion");
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.HistorialAdopciones", b =>
                {
                    b.HasOne("PawfectMatch.Models.Adoptantes", "Adoptante")
                        .WithMany()
                        .HasForeignKey("AdoptanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.Mascotas", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adoptante");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.SolicitudesAdopciones", b =>
                {
                    b.HasOne("PawfectMatch.Models.Adoptantes", "Adoptante")
                        .WithMany()
                        .HasForeignKey("AdoptanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Solicitudes.EstadoSolicitudes", "EstadoSolicitud")
                        .WithMany()
                        .HasForeignKey("EstadoSolicitudId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PawfectMatch.Models._Mascotas.Mascotas", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adoptante");

                    b.Navigation("EstadoSolicitud");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("PawfectMatch.Models._Presentacion.Presentaciones", b =>
                {
                    b.Navigation("PresentacionesDiapositivas");
                });

            modelBuilder.Entity("PawfectMatch.Models._Solicitudes.SolicitudesAdopciones", b =>
                {
                    b.Navigation("SolicitudesServicios");
                });
#pragma warning restore 612, 618
        }
    }
}
